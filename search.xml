<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NEAR SDK - 减小合约尺寸</title>
      <link href="//post/NEAR%20SDK%20-%20%E5%87%8F%E5%B0%8F%E5%90%88%E7%BA%A6%E5%B0%BA%E5%AF%B8.html"/>
      <url>//post/NEAR%20SDK%20-%20%E5%87%8F%E5%B0%8F%E5%90%88%E7%BA%A6%E5%B0%BA%E5%AF%B8.html</url>
      
        <content type="html"><![CDATA[<h3 id="建议和示例"><a href="#建议和示例" class="headerlink" title="建议和示例"></a>建议和示例</h3><p>本文是为熟悉低级概念的开发人员编写的,这些开发人员希望以牺牲代码可读性为代价,显著的减少合约的尺寸.</p><p>这些方法可能有用的一些常见场景:</p><ol><li>与个人账户管理绑定的合约</li><li>使用工厂部署的合约</li><li>未来的发展,比如运行在NEAR上的EVM</li></ol><h4 id="Small-wins"><a href="#Small-wins" class="headerlink" title="Small wins"></a>Small wins</h4><h5 id="使用标记"><a href="#使用标记" class="headerlink" title="使用标记"></a>使用标记</h5><p>当编译合约时,确保将<code>-C link-arg=-s</code>传递给rust编译器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">RUSTFLAGS&#x3D;&#39;-C link-arg&#x3D;-s&#39; cargo build --target wasm32-unknown-unknown --release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是在大多数实例的<code>Cargo.toml</code>中使用的示例:</p><pre class="line-numbers language-none"><code class="language-none">[profile.release]codegen-units &#x3D; 1opt-level &#x3D; &quot;s&quot;lto &#x3D; truedebug &#x3D; falsepanic &#x3D; &quot;abort&quot;overflow-checks &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能想尝试使用<code>opt-level = &quot;z&quot;</code>替换<code>opt-level = &quot;s&quot;</code>,看是否能生成较小二进制文件.查看<a href="https://doc.rust-lang.org/cargo/reference/profiles.html#opt-level">The Cargo Book Profiles section</a>获得更多细节.你可能也想引用 <a href="https://rustwasm.github.io/book/reference/code-size.html#tell-llvm-to-optimize-for-size-instead-of-speed">Shrinking .wasm Size</a>这个资源.</p><h5 id="从名单中删除rlib"><a href="#从名单中删除rlib" class="headerlink" title="从名单中删除rlib"></a>从名单中删除<code>rlib</code></h5><p>确认你的名单(<code>Cargo.toml</code>)没有包含<code>rlib</code>,除非它需要.一些NEAR的示例包含以下内容</p><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">增加了不必要的膨胀</p><p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[lib]crate-type &#x3D; [&quot;cdylib&quot;, &quot;rlib&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p></div><p>可以这样修改:</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[lib]crate-type &#x3D; [&quot;cdylib&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p></div><h5 id="重载序列化协议"><a href="#重载序列化协议" class="headerlink" title="重载序列化协议"></a>重载序列化协议</h5><p>当使用Rust SDK时,可以使用Borsh重载默认的JSON序列化.在<a href="https://www.near-sdk.io/contract-interface/serialization-interface#overriding-serialization-protocol-default">这里</a>查看更多的信息和示例</p><h5 id="避免使用标准的assert宏"><a href="#避免使用标准的assert宏" class="headerlink" title="避免使用标准的assert宏"></a>避免使用标准的<code>assert</code>宏</h5><p>当使用断言时,避免使用标准的<code>assert</code>宏,像<code>assert!</code>,<code>assert_eq!</code>,或者<code>assert_ne!</code>,因为这些宏可能会添加关于错误行号的信息.<code>unwrap</code>,<code>expect`和Rust的</code>panic!()&#96;&#96;宏也有这个问题</p><p><strong>一个标准的断言:</strong></p><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">增加不必要的膨胀</p><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>contract_owner<span class="token punctuation">,</span> predecessor_account<span class="token punctuation">,</span> <span class="token string">"ERR_NOT_OWNER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></div><p>可以这样修改:</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">if</span> contract_owner <span class="token operator">!=</span> predecessor_account <span class="token punctuation">&#123;</span>  <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">b"ERR_NOT_OWNER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></div><p><strong>移除<code>expect</code>的示例:</strong></p><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">增加不必要的膨胀</p><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> owner_id <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>owner_by_id<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Token not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></div><p>可以这样修改:</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">expect_token_found</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>option<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span>  option<span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">panic_str</span><span class="token punctuation">(</span><span class="token string">"Token not found"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> owner_id <span class="token operator">=</span> <span class="token function">expect_token_found</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>owner_by_id<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p></div><p><strong>修改标准的panic!()宏:</strong></p><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">增加不必要的膨胀</p><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"ERR_MSG_HERE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></div><p>可以这样修改:</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">panic_str</span><span class="token punctuation">(</span><span class="token string">"ERR_MSG_HERE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></div><h4 id="低级别方法"><a href="#低级别方法" class="headerlink" title="低级别方法"></a>低级别方法</h4><p>关于使用<code>no_std</code>最小化合约的方法,观察以下示例:</p><ul><li><a href="https://github.com/near/nearcore/tree/master/runtime/near-test-contracts/tiny-contract-rs">Tiny contract</a></li><li><a href="https://github.com/ilblackdragon/near-eth-gateway/blob/master/proxy/src/lib.rs">NEAR ETH Gateway</a></li><li><a href="https://youtu.be/Hy4VBSCqnsE">This YouTube video</a> - 关于同质化代币的示例.代码在这里example lives here](<a href="https://github.com/near/core-contracts/pull/88">https://github.com/near/core-contracts/pull/88</a>).</li><li><a href="https://github.com/austinabell/nesdie/tree/main/examples">Examples using a project called <code>nesdie</code></a>.</li><li>请注意,Aurora已经发现使用<code>rjson</code>作为轻量化的JSON序列化协议是成功.它比目前的<code>serde</code>占用的空间更小.请查阅Aurora存储库中的<a href="https://github.com/aurora-is-near/aurora-engine/blob/65a1d11fcd16192cc1bda886c62005c603189a24/src/json.rs#L254">rjson示例</a>,不过实现细节必须由读者发掘,这里不做展开.<a href="https://github.com/austinabell/nesdie/blob/bb6beb77e32cd54077ac54bf028f262a9dfb6ad0/examples/multisig/src/utils/json/vector.rs#L26-L30">nesdie示例</a>也使用<a href="https://crates.io/crates/miniserde">miniserde crate</a>,对那些避免使用Rust SDK的人来说,<code>这是另一个选择</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEAR </tag>
            
            <tag> near-sdk-rs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEAR SDK - 合约升级</title>
      <link href="//post/NEAR%20SDK%20-%20%E5%90%88%E7%BA%A6%E5%8D%87%E7%BA%A7.html"/>
      <url>//post/NEAR%20SDK%20-%20%E5%90%88%E7%BA%A6%E5%8D%87%E7%BA%A7.html</url>
      
        <content type="html"><![CDATA[<h3 id="升级合约"><a href="#升级合约" class="headerlink" title="升级合约"></a>升级合约</h3><p>当你修改了合约接口并重新部署时,你可能会看到这样的错误:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Cannot deserialize the contract state.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么会这样?</p><p>当你的合约执行时,NEAR Runtime从磁盘读取序列化后的状态,并且使用当前的合约代码来加载它.当你的代码改变但是序列化后的状态保持不填时,Runtime无法判断该如何去做.</p><p>如何避免这样的错误?</p><p>当你还处于研发阶段,你可以构建一个原型并在本地或测试网络中部署它.当你做出了一个突破性的修改,你可以删除所有以前的合约状态.下面有几种方法可以做到这一点.</p><p>当你准备好部署一个更稳定的合约时,有几个生产策略可以帮助你更新合约状态而不无需删除它.一旦你的合约从”可信任模式”(维护者控制一个<code>Full Access key</code>)过渡到社区治理模式(不再拥有<code>Full Access key</code>).你就需要知道如何通过DAO投票来升级你的合约代码本身.</p><h4 id="快速原型开发-删除所有内容"><a href="#快速原型开发-删除所有内容" class="headerlink" title="快速原型开发:删除所有内容"></a>快速原型开发:删除所有内容</h4><p>这里有两种方式来删除账户状态:</p><ol><li><code>rm -rf neardev &amp;&amp; nearr dev-deploy</code></li><li>删除并重新创建一个合约账户</li></ol><p>对于这两种情况,让我们考虑下面的示例</p><p><a href="https://github.com/near-examples/rust-status-message">rust-status-message</a>合约示例拥有下面的结构:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Default</span> <span class="token keyword">for</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"r"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> account_id <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>records<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>records<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们假设你已经在测试网部署了合约,然后进行下面的调用:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near call [contract] set_status &#39;&#123;&quot;message&quot;: &quot;lol&quot;&#125;&#39; --accountId you.testnetnear view [contract] get_status &#39;&#123;&quot;account_id&quot;: &quot;you.testnet&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这将放回你通过调用<code>set_status</code>设置的消息,在本例中为”lol”</p><p>此时,合约已经部署并拥有了一些状态</p><p>现在,我们假设你修改了合约,为每个账户存储两种数据</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    taglines<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span>    bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Default</span> <span class="token keyword">for</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            taglines<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"r"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"b"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_tagline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> account_id <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>taglines<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_tagline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>taglines<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_bio</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> account_id <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>bios<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_bio</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你再次构建和部署这个合约,心想可能因为新的<code>taglines</code>LookupMap集合与旧的<code>record</code>LookupMap集合拥有同样的前缀(前缀<code>r</code>,在<code>LookupMap::new(b&#39;r&#39;.to_vec())</code>时设置),你在tagline中的数据应该是<code>&quot;lol&quot;</code> ,但当你<code>near view</code>这个合约时,你得到了<code>Cannot deserialize</code>消息.该怎么做?</p><h5 id="1-rm-rf-neardev-amp-amp-near-dev-deploy"><a href="#1-rm-rf-neardev-amp-amp-near-dev-deploy" class="headerlink" title="1.rm -rf neardev &amp;&amp; near dev-deploy"></a>1.<code>rm -rf neardev &amp;&amp; near dev-deploy</code></h5><p>当我们开始一个新项目时,最快的部署合约的方法是使用<code>dev-deploy</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near dev-deploy [--wasmFile .&#x2F;path&#x2F;to&#x2F;compiled.wasm]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会做下面几件事:</p><ol><li>创建一个测试网账户,名称类似于<code>dev-1232323131231123-356645345345345</code></li><li>将账户名存储项目中的<code>neardev</code>文件夹</li><li>将该账户的私钥存储到<code>~/.near-credentials</code>文件夹中</li><li>将你的合约代码部署到该账户</li></ol><p>下一次你使用<code>dev-deploy</code>时,它会检查<code>neardev</code>文件夹然后重新部署到相同的账户,而不是重新创建一个</p><p>但是在上面的例子里,我们想要删除账户状态.我们该怎么做?</p><p>最简单的方法就是删除<code>neardev</code>文件夹,然后再次运行<code>near dev-deploy</code>.这将创建一个测试网账户以及(空的)账户状态.接下来在上面部署最新的合约.</p><h5 id="2-删除并重新创建合约账户"><a href="#2-删除并重新创建合约账户" class="headerlink" title="2.删除并重新创建合约账户"></a>2.删除并重新创建合约账户</h5><p>如果你想要相比不断变化的<code>dev-*</code>账户更想要一个可预测的账户,最好的方法可能是创建一个子账户</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near create-account app-name.you.testnet --masterAccount you.testnet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以在上面部署你的合约</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near deploy --accountId app-name.you.testnet [--wasmFile .&#x2F;path&#x2F;to&#x2F;compiled.wasm]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中,你改怎么删除所有账户状态并重新开始呢?删除子账户并重新创建它</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near delete app-name.you.testnet you.testnet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将<code>app-name.you.testnet</code>账户的资金发送给<code>you.testnet</code>.并且会删除已经部署在它上面的合约已经所有的合约状态</p><p>现在你创建了一个子账户并通过上面的命令重新部署了合约.账户的状态将是全新的,就像你第一次在上面部署一样.</p><h4 id="生产应用基础"><a href="#生产应用基础" class="headerlink" title="生产应用基础"></a>生产应用基础</h4><p>当新代码部署到生产合约时,你显然不能像在快速原型开发过程中那么销毁旧的账户状态.那么怎么避免这种可怕的错误呢?</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Cannot deserialize the contract state.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你有几种不同的解决方案,取决于你的合约的复杂性.</p><h5 id="Migration方法"><a href="#Migration方法" class="headerlink" title="Migration方法"></a><code>Migration</code>方法</h5><p>以前面的<code>rust-status-message</code>为例,你只需要一个简单的<code>migration</code>方法</p><p>提醒一下,我们的目的是改变下面的合约:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Default</span> <span class="token keyword">for</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"r"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变成:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    taglines<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span>    bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Default</span> <span class="token keyword">for</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            taglines<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"r"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"b"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NEAR运行时查看你序列化并保存在磁盘中的代码和合约数据.当它执行代码时,将尝试匹配他们.如果你改变了代码但是数据已经保持不变,运行时将无法理解该如何去做.之前我们通过移除旧的序列化代码”解决”了这个问题.现在让我们来看看怎么更新已经存在的数据.</p><p>首先,在最后一次部署时保持旧的结构体</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">OldStatusMessage</span> <span class="token punctuation">&#123;</span>    records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在主结构体方法实现中添加一个<code>migrate</code>方法</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[private]</span><span class="token attribute attr-name">#[init(ignore_state)]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> old_state<span class="token punctuation">:</span> <span class="token class-name">OldStatusMessage</span> <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">state_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        taglines<span class="token punctuation">:</span> old_state<span class="token punctuation">.</span>records<span class="token punctuation">,</span>        bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"b"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details class="custom-details"><summary>点击查看合约更新前后的差别</summary><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token operator">+</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize)]</span><span class="token operator">+</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">OldStatusMessage</span> <span class="token punctuation">&#123;</span><span class="token operator">+</span>    records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token punctuation">&#125;</span><span class="token operator">+</span> <span class="token attribute attr-name">#[near_bindgen]</span> <span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize)]</span> <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">StatusMessage</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span>    records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">+</span>    taglines<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">+</span>    bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">impl</span> <span class="token class-name">Default</span> <span class="token keyword">for</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">fn</span> <span class="token function-definition function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span>            records<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"r"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span>            taglines<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"r"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span>            bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"b"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>  <span class="token attribute attr-name">#[near_bindgen]</span> <span class="token keyword">impl</span> <span class="token class-name">StatusMessage</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">+</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_tagline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">let</span> account_id <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>records<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>taglines<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>    <span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token operator">+</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_tagline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token operator">+</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>taglines<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token operator">-</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token operator">-</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>records<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_bio</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">+</span>        <span class="token keyword">let</span> account_id <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>bios<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>    <span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token operator">+</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_bio</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token operator">+</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>    <span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token operator">+</span>    <span class="token attribute attr-name">#[private]</span><span class="token operator">+</span>    <span class="token attribute attr-name">#[init(ignore_state)]</span><span class="token operator">+</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span><span class="token operator">+</span>        <span class="token keyword">let</span> old_state<span class="token punctuation">:</span> <span class="token class-name">OldStatusMessage</span> <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">state_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span><span class="token operator">+</span>            taglines<span class="token punctuation">:</span> old_state<span class="token punctuation">.</span>records<span class="token punctuation">,</span><span class="token operator">+</span>            bios<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"b"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></details><p>你可以在部署你的更改时,调用<code>migrate</code>方法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near deploy \  --wasmFile res&#x2F;status_message.wasm \  --initFunction &quot;migrate&quot; \  --initArgs &quot;&#123;&#125;&quot; \  --accountId app-name.you.testnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终,你可以通过新的<code>get_tagline</code>方法查看旧的消息.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near view app-name.you.testnet get_tagline &#39;&#123;&quot;account_id&quot;: &quot;you.testnet&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">整理合约</p><p>此时,所有的合约状态都已经迁移,你不需要保留<code>OldStatusMessage</code>结构或<code>migrate</code>方法.你可以随意删除他们并在不调用<code>initFunction</code>的情况下再次部署他们.你的合约会很简洁,并为下一次迁移做好准备</p></div><h4 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h4><p>在上面的例子里,所有的合约状态都存储在一个简单的结构体中.真实世界中的合约会更加的复杂,经常拥有其他结构体的引用.例如,一个DAO合约可能看起来是这样的:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">ProposalStatus</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Proposed</span><span class="token punctuation">,</span>    <span class="token class-name">Approved</span><span class="token punctuation">,</span>    <span class="token class-name">Rejected</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Proposal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> status<span class="token punctuation">:</span> <span class="token class-name">ProposalStatus</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">DAO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> proposals<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Proposal</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">笔记</p><p><p>有关DAO示例的完整信息,查看<a href="https://github.com/near-daos/sputnik-dao-contract/blob/317ea4fb1e6eac8064ef29a78054b0586a3406c3/sputnikdao2/src/lib.rs">SputnikDAO</a>,<a href="https://github.com/fluxprotocol/amm/blob/3def886a7fbd2df4ba28e18f67e6ab12cd2eee0b/dao/src/lib.rs">Flux</a>,还有<a href="https://github.com/search?q=near+dao">其他</a></p></p></div><p>假设你想要更新<code>Proposal</code>的结构,但是保持<code>DAO</code>不变</p><p>首先要注意的是,合约中可能存储有大量<code>Proposal</code>数据.由于<code>gas</code>的限制,不可能再一个交易中迁移所有提案.在链外脚本中,你可以查询合约完整的状态,并通过多个交易更新每一个<code>Proposal</code>数据.但是,这可能会非常昂贵.所以您可能会选择在下一次和<code>Proposal</code>数据交互时更新<code>Proposal</code>(这将成本分散给了每个用户).</p><p>在任何一种情况下,你的合约都可能同时使用原始的结构和新的结构来结束<code>Proposal</code>.并且<code>DAO</code>结构体需要知道如何加载这两种结构.这是怎样做到的?</p><p>使用枚举:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">ProposalStatus</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Proposed</span><span class="token punctuation">,</span>    <span class="token class-name">Approved</span><span class="token punctuation">,</span>    <span class="token class-name">Rejected</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ProposalV1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> status<span class="token punctuation">:</span> <span class="token class-name">ProposalStatus</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Proposal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> status<span class="token punctuation">:</span> <span class="token class-name">ProposalStatus</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">UpgradableProposal</span> <span class="token punctuation">&#123;</span>    <span class="token constant">V1</span><span class="token punctuation">(</span><span class="token class-name">ProposalV1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token constant">V2</span><span class="token punctuation">(</span><span class="token class-name">Proposal</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">UpgradableProposal</span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token class-name">Proposal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>proposal<span class="token punctuation">:</span> <span class="token class-name">UpgradableProposal</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">match</span> proposal <span class="token punctuation">&#123;</span>            <span class="token class-name">UpgradableAccount</span><span class="token punctuation">::</span><span class="token constant">V2</span><span class="token punctuation">(</span>proposal<span class="token punctuation">)</span> <span class="token operator">=></span> proposal<span class="token punctuation">,</span>            <span class="token class-name">UpgradableAccount</span><span class="token punctuation">::</span><span class="token constant">V1</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Proposal</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// set title to first 10 chars of description</span>                title<span class="token punctuation">:</span> v1<span class="token punctuation">.</span>description<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">str</span><span class="token punctuation">::</span>to_owned<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                description<span class="token punctuation">:</span> v1<span class="token punctuation">.</span>description<span class="token punctuation">,</span>                status<span class="token punctuation">:</span> v1<span class="token punctuation">.</span>status<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshSerialize, BorshDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">DAO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> proposals<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">UpgradableProposal</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">未测试的实例</p><p>上面的示例没有经过测试,可能是未完成或包含有bug</p><p>需要有人创建一个完整的示例库,清楚的演示这个升级过程,并在上面的片段链接到它</p><p>此时,你可以在下面的链接中看到工作中的实例和了解更多关于这个模式的信息</p><ul><li><a href="https://github.com/evgenykuzyakov/berryclub/commit/d78491b88cbb16a79c15dfc3901e5cfb7df39fe8">https://github.com/evgenykuzyakov/berryclub/commit/d78491b88cbb16a79c15dfc3901e5cfb7df39fe8</a></li><li><a href="https://nomicon.io/ChainSpec/Upgradability.html">https://nomicon.io/ChainSpec/Upgradability.html</a></li><li><a href="https://github.com/mikedotexe/rust-contract-upgrades/pulls">https://github.com/mikedotexe/rust-contract-upgrades/pulls</a></li></ul></div><h5 id="编写可升级的合约"><a href="#编写可升级的合约" class="headerlink" title="编写可升级的合约"></a>编写可升级的合约</h5><p>如果你计划在合约的生命周期内升级你的合约,从枚举开始.只有在决定升级之后才添加他们是可行的.但会导致难以遵循(更容易出错)的代码.</p><h4 id="DAO治理升级"><a href="#DAO治理升级" class="headerlink" title="DAO治理升级"></a>DAO治理升级</h4><p>当你在主网中第一次部署一个合约,你可能会对合约的完全访问秘钥保持控制.这将置合约于”授信”模式.在这种模式下,你和其他维护者可以随意更改它(这意味着你的用户需要信任你不会窃取他们的资金,修改他们的投票或者其他恶意行为).这对于早期的合约和应用来说是不错的,但和其他区块链一样,NEAR允许你做的更好.</p><p>当你准备好, 你可以删除所有的完全访问秘钥.这意味着任何人都不能单方面的升级合约.相反,合约只能通过DAO升级.在移除所有的完全访问秘钥之前,你需要实现两个方法:</p><ol><li>一种存储提议的合约新版本的方法(以Wasm bytes存在,以一种可检查的方式,这样DAO成员就可以验证字节是否与源代码的特定更改相匹配).这个函数是安全的,任何人都可以调用它.</li><li>另外还需要一种实际部署新版本的方法.这个方法应该检查是否被您的DAO合约调用.DAO合约账户名可以在你的合约中用一个类似于<code>owner_id</code>的字段存储,这样它就可以通过相同的流程进行升级</li></ol><p>这里是<a href="https://github.com/ref-finance/ref-contracts/blob/b3aa78e83f2459017c9301d1f1b8d1ba8bcf6e7e/ref-exchange/src/owner.rs#L52-L107">Ref Finance是怎么做的</a>,<a href="https://github.com/near-daos/sputnik-dao-contract/blob/a8fc9a8c1cbde37610e56e1efda8e5971e79b845/sputnikdao2/src/types.rs#L74-L142">SputnikDAO是怎么做的</a>,以及一些<a href="https://hackmd.io/_UMem3SNSAeIqQASlRZahg">其他提示</a></p>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEAR </tag>
            
            <tag> near-sdk-rs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEAR SDK - 构建合约</title>
      <link href="//post/NEAR%20SDK%20-%20%E6%9E%84%E5%BB%BA%E5%90%88%E7%BA%A6.html"/>
      <url>//post/NEAR%20SDK%20-%20%E6%9E%84%E5%BB%BA%E5%90%88%E7%BA%A6.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>你可以通过下面的命令来编译出你的合约的发行版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cargo build --target wasm32-unknown-unknown --release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>上面的<code>build</code>命令指定了一个<code>target</code>标志来创建一个WebAssembly<code>.wasm</code>文件</p></blockquote><p>注意你的工程目录现在增加了一点文件:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token punctuation">.</span>├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>lock  ⟵ created during build to lock dependencies├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>toml├── src│  └── lib<span class="token punctuation">.</span>rs└── target      ⟵ created during build<span class="token punctuation">,</span> holds the compiled wasm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建和标记"><a href="#构建和标记" class="headerlink" title="构建和标记"></a>构建和标记</h4><p>我们推荐你使用下面的标记来优化你的构建产物</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">env &#39;RUSTFLAGS&#x3D;-C link-arg&#x3D;-s&#39; cargo build --target wasm32-unknown-unknown --release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令本质上是设置了特殊的标记来优化构建产物.最终,它也只是一个个性化的<code>cargo build --release</code>命令罢了</p><p><strong>Windows用户</strong>:请像这样这样修改上面的命令:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set RUSTFLAGS&#x3D;-C link-arg&#x3D;-scargo build --target wasm32-unknown-unknown --release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可以将标记添加至<code>ProjectFolder/.cargo/config.toml</code>来简化你的命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[target.wasm32-unknown-unknown]rustflags &#x3D; [&quot;-C&quot;, &quot;link-arg&#x3D;-s&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://github.com/near/near-sdk-rs/blob/05e4539a8f3db86dd43b768ee9660dd4c8e7ea5c/examples/fungible-token/.cargo/config.toml">这里</a>可以找到示例</p><h3 id="可重现的构造"><a href="#可重现的构造" class="headerlink" title="可重现的构造"></a>可重现的构造</h3><p>可重现的构造使得不同的人构造同样的程序,并得到彼此完全相同的输出.这将帮助用户信任已部署的合约是正确构造的,并且与源代码对应.要验证您的合约,用户可以自己构造它,并检查二进制文件是否相同.</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果你在两台不同的机器上构建你的合约.你大概率会得到两份相似但不完全相同的二进制文件.你的构造产物会受你的换进的时区,低点,构造路径等十亿种因素的影响.Rust社区为解决这个问题已经战斗了很长的时间了.但是现在还没有解决</p><h4 id="CI解决方案"><a href="#CI解决方案" class="headerlink" title="CI解决方案"></a>CI解决方案</h4><p>我们建议你使用我们的<a href="https://github.com/near/near-sdk-rs/tree/master/contract-builder">Contract Builder</a>来构造你的合约.它使用Docker,您和您的用户都可以使用相同的可控的环境.Docker镜像在<a href="https://www.near-sdk.io/building/reproducible-builds">这里</a>.合约在Contract Builder中构造出的二进制文件与在其他的机器中构造出来的一样</p><h3 id="后期处理工具"><a href="#后期处理工具" class="headerlink" title="后期处理工具"></a>后期处理工具</h3><p>合约的大小是一个关键的特征.让它保持最小的最好方法是设计良好的极简代码,减少依赖项的数量.这在大型合约和大型多合约dApp中尤为重要,因为他们的部署会花费大量资金</p><p>当你尽你所能优化了合约代码,通过减少合约规模来减小合约大小是值得的</p><h4 id="准备使用脚本"><a href="#准备使用脚本" class="headerlink" title="准备使用脚本"></a>准备使用脚本</h4><p>我们准备了一个简单的<code>bash</code>脚本来修剪<code>.wasm</code>合约文件.你可以在<a href="https://www.near-sdk.io/building/post-processing-tools">这里</a>找到它</p><p>目前使用的缩小规模的方法如下:</p><ul><li>使用<code>wasm-snip</code>从标准库中删除一些已知的fat函数(如浮点格式和panic相关)</li><li>使用<code>wasm-gc</code>从剪切掉的函数中排除所有可用到的函数</li><li>去掉不需要的部分,比如使用<code>wasm-strip</code></li><li>运行<code> binaryen wasm-opt</code>,它会清除剩下的内容</li></ul><h4 id="运行脚本的要求"><a href="#运行脚本的要求" class="headerlink" title="运行脚本的要求"></a>运行脚本的要求</h4><ul><li><p>通过Cargo安装<code>wasm-snip</code>和<code>wasm-gc</code>:</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">cargo install wasm-snip wasm-gc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对于Ubuntu和其他基于Debian的Linux发行版,在你的系统中安装<code>binaryen</code>和<code>wabt</code>.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">apt install binaryen wabt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>缩减可能是相当激进的.所以你必须测试缩减后的合约.<code>[独立的NEAR运行时](https://www.near-sdk.io/building/post-processing-tools)</code>可能是有用的.</p>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEAR </tag>
            
            <tag> near-sdk-rs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEAR SDK - 合约结构</title>
      <link href="//post/NEAR%20SDK%20-%20%E5%90%88%E7%BA%A6%E7%BB%93%E6%9E%84.html"/>
      <url>//post/NEAR%20SDK%20-%20%E5%90%88%E7%BA%A6%E7%BB%93%E6%9E%84.html</url>
      
        <content type="html"><![CDATA[<h3 id="near-bindgen"><a href="#near-bindgen" class="headerlink" title="near_bindgen"></a>near_bindgen</h3><p><code>#[near_bindgen]</code>宏被用于结构体和方法实现中以生成必要的代码使其成为一个可用的NEAR合约并且暴露想要公开的方法并使其能够被外部调用</p><p>例如,下面是一个简单的计数合约,<code>#[near_bindgen]</code>宏被这样使用:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span>borsh<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">BorshDeserialize</span><span class="token punctuation">,</span> <span class="token class-name">BorshSerialize</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span></span>near_bindgen<span class="token punctuation">;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, Default)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Counter</span> <span class="token punctuation">&#123;</span>    value<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u64</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中,<code>Counter</code>结构体相当于智能合约的状态,可以包含任何实现了BorshDeserialize和BorshSerialize的成员,甚至是集合,我们将在后面讨论它.当方法被调用时,合约状态将被加载并反序列化,因此,保证加载的数据尽可能少是很重要的.</p><p><code>#[near_bindgen]</code>同样可以注释<code>Counter</code>的方法实现,这将生成必要的模板文件来暴露这些方法.我们必须牢记核心的交互规则:</p><ul><li>任何<code>pub</code>方法都能在外部被账户&#x2F;合约调用.<ul><li>更多的信息,查看<a href="https://www.near-sdk.io/contract-interface/public-methods">公共方法类型</a></li></ul></li><li><code>self</code>有多种用法来控制合约的可变性<ul><li>使用<code>&amp;self</code>和<code>self</code>的方法将是只读的.并且不会写入和更新存储中的状态</li><li>使用<code>&amp;mut self</code>的方法将允许改变状态,状态将在合约调用结束后写入存储</li></ul></li><li>如果公开的函数的参数不包括<code>self</code>.那么它的调用可以省略状态读写<ul><li>这对于一些静态功能或返回嵌入在合约代码中的数据可能很有用.</li></ul></li><li>如果函数有返回值,它将被序列化并且通过<code>env::value_return</code>作为结果附加</li></ul><h4 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h4><p>默认的,合约的<code>Default::default()</code>实现会用于合约的初始化.也可以有一个自定义的初始化函数,它接受参数并执行自定义逻辑.初始化韩式放在<code>#[init]</code>标注下</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[init]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">log!</span><span class="token punctuation">(</span><span class="token string">"Custom counter initialization!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有合约都预先实现了<code>Default</code>,如果你想要禁止使用default实现,<code>PanicOnDefault</code>宏可以做到这一点:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Counter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="可支付方法"><a href="#可支付方法" class="headerlink" title="可支付方法"></a>可支付方法</h4><p>方法可以标注为<code>#[payable]</code>以允许方法在调用时进行通证的转移.更多的信息,查看<a href="https://www.near-sdk.io/contract-interface/payable-methods">可支付方法</a></p><p>下面的例子使用<code>#[payable]</code>注释宣告了函数是可支付的:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[payable]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">my_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><p>有些方法需要公开以允许合约通过<code>Promise</code>调用自身的方法,但是又不允许其他任何合约&#x2F;账户调用它.为此,使用<code>#[private]</code>注释方法以使得外部合约&#x2F;账户的调用会导致<code>panic</code>.更多的信息,查看<a href="https://www.near-sdk.io/contract-interface/payable-methods">私有方法</a></p><p>该注释通过以下的方式应用</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[private]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">my_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>当决定应用程序数据使用的数据结构时,重要的是尽可能减少读取和写入存储的数据量,以及反序列化和序列化的数据量,以尽可能的减少交易成本.理解智能合约中的不同数据结构的侧重点非常重要,因为随着程序的扩展,它将成为瓶颈,并且将状态迁移至新的数据结构会付出代价.</p><p><code>near-sdk</code>中的容易被设计成将数据分割成块,并且只会在需要时才进行读取和写入.这些数据结构负责和存储的低级交互并且被设计成与<code>std::collections</code>具有相同的API.</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><code>near_sdk::collections</code>将迁移至<code>near_sdk::store</code>并更新了API.如果你想要访问这些更新的结构体实现,启用<code>unstable</code>特性在<code>near-sdk</code>中.</p></blockquote><p>在使用<code>std::collections</code>时需要牢记,每次状态被加载时,数据结构中的所有数据都将被读取和反序列化.这将为使用任何非少量的数据带来巨大的开销.所以为了最小化gas使用量,大多数情况下,应该是用SDK中的集合.</p><p>SDK中存在如下数据结构:</p><table><thead><tr><th>SDK集合</th><th><code>std</code>等价物</th><th>描述</th></tr></thead><tbody><tr><td><code>LazyOption&lt;T&gt;</code></td><td><code>Option&lt;T&gt;</code></td><td>存储中可选的值.该类型只会在交互时才从存储中读取.当值存在于存储中时,会以 Some<T>的类型提供,当不存在时返回 None</td></tr><tr><td><code>Vecttor&lt;T&gt;</code></td><td><code>Vec&lt;T&gt;</code></td><td>可增长的数组类型.这些值在内存中分片,可以被迭代,并且索引值是可以动态调整大小的</td></tr><tr><td><code>LookupMap&lt;K,V&gt;</code></td><td><code>HashMap&lt;K,V&gt;</code></td><td>该结构相当于一个合约可用的 map的廋包装体.该结构不包含任何关于 map 中元素的元数据,因此不可迭代</td></tr><tr><td><code>unorderedMap&lt;K,V&gt;</code></td><td><code>HashMap&lt;K,V&gt;</code></td><td>与 LookupMap 类似,除了该结构保存能让内部元素进行迭代的额外数据</td></tr><tr><td><code>TreeMap&lt;K,V&gt;</code></td><td><code>BTreeMap&lt;K,V&gt;</code></td><td>UnorderedMap 的有序等价物.当需要一致的顺序或者访问最小,最大键时,应该使用这个结构.底层实现基于 AVL tree</td></tr><tr><td><code>LookupSet&lt;T&gt;</code></td><td><code>HashSet&lt;T&gt;</code></td><td>类似于 LookupMap 的 Set,但不存储和值.只被用来检查特定值是否存在.该结构不能迭代并且只能用来查找</td></tr><tr><td><code>UnorderedSet&lt;T&gt;</code></td><td><code>HashSet&lt;T&gt;</code></td><td>LookupMap 的可迭代等价物,它存储了一些关于 Set 内部元素的额外信息</td></tr></tbody></table><h4 id="内存中的-HashMap-vs-持久化的-UnorderedMap"><a href="#内存中的-HashMap-vs-持久化的-UnorderedMap" class="headerlink" title="内存中的 HashMap vs 持久化的 UnorderedMap"></a>内存中的 <code>HashMap</code> vs 持久化的 <code>UnorderedMap</code></h4><ul><li><code>HashMap</code> 保持所有数据在内存中,为了访问它,合约需要反序列化整个 Map</li><li><code>UnorderedMap</code> 保持所有数据在存储中,访问任何元素只需要反序列化该元素.</li></ul><p>在什么时候使用 <code>HashMap</code>?</p><ul><li>需要在一次方法调用中迭代集合中的所有元素</li><li>元素数量小或固定.例如小于 10 个</li></ul><p>在什么时候使用 <code>UnorrderedMap</code>?</p><ul><li>需要访问整个集合中有限的子集合,例如每次调用只需要访问 1 个或 2 个元素</li><li>无法将整个集合放入内存,例如数据量过大</li></ul><p>原因是 <code>HashMap``` 在一个存储操作中反序列化(或序列化)整个集合.比通过 </code>N&#96;&#96; 个存储操作访问所有元素更加节约 gas 费</p><p>使用<code>HashMap</code>的示例:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// Using Default initialization.</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, Default)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> status_updates<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">predecessor_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Too many messages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Effectively iterating through all removing them.</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_all_updates</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>UnorderedMap</code>的示例:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> status_updates<span class="token punctuation">:</span> <span class="token class-name">UnorderedMap</span><span class="token operator">&lt;</span><span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[init]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Initializing `status_updates` with unique key prefix.</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            status_updates<span class="token punctuation">:</span> <span class="token class-name">UnorderedMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"s"</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">predecessor_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Note, don't need to check size, since `UnorderedMap` doesn't store all data in memory.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">delete_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">predecessor_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">AccountId</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用持久化集合进行分页"><a href="#使用持久化集合进行分页" class="headerlink" title="使用持久化集合进行分页"></a>使用持久化集合进行分页</h4><p>分页集合例如 <code>UnorderedMap</code>,<code>UnorderedSet</code>,和 <code>Vector</code> 可能包含的元素数量超过了 gas 限制下的读取数量.为了通过<code>view</code>调用来公开显示他们,我们可以实现分页.</p><p><code>Vector</code> 通过使用<code>.get(index)</code>来获取指定下标的元素</p><p>要在 <code>UnorderedSet</code> 使用下标来访问元素.我们可以使用<code> .as_vector()</code>方法,该方法将返回元素的 <code>Vector</code></p><p>关于 <code>UnoderedMap</code> 我们需要将 keys 和 values 转换成 <code>Vector</code>,分别使用<code>.keys_as_vector()</code>和<code>.values_as_vector()</code></p><p>使用<code>UnorderedMap</code>实现分页的示例:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> status_updates<span class="token punctuation">:</span> <span class="token class-name">UnorderedMap</span><span class="token operator">&lt;</span><span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/// Retrieves multiple elements from the `UnorderedMap`.</span>    <span class="token comment">/// - `from_index` is the index to start from.</span>    <span class="token comment">/// - `limit` is the maximum number of elements to return.</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_updates</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> from_index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">keys_as_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">values_as_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>from_index<span class="token punctuation">..</span><span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token function">min</span><span class="token punctuation">(</span>from_index <span class="token operator">+</span> limit<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>status_updates<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>index<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> values<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LookupMapvsUnorderedMap"><a href="#LookupMapvsUnorderedMap" class="headerlink" title="LookupMapvsUnorderedMap"></a><code>LookupMap</code>vs<code>UnorderedMap</code></h4><h5 id="功能性"><a href="#功能性" class="headerlink" title="功能性"></a>功能性</h5><ul><li><code>UnorderedMap</code>支持迭代keys和values,并且支持分页.在内部,它拥有三个存储结构<ul><li>一个存储key与index关系的map</li><li>一个keys的数组</li><li>一个values的数组</li></ul></li><li><code>LookupMap</code>只拥有一个存储key和value关系的map.没有存储keys的数组,所以它没有能力进行keys的迭代</li></ul><h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><p><code>LookupMap</code>比<code>UnorderedMap</code>拥有更好的性能和存储更少的数据</p><ul><li><code>UnorderedMap</code>获取数据时需要2次读取操作,写入或插入数据时需要3次写入操作</li><li><code>LookupMap</code>读取时需要1次读取操作,写入时需要1次写入操作</li></ul><h5 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h5><p><code>UnorderedMap</code>比<code>LookupMap</code>需要更多的存储空间</p><ul><li><code>UnorderedMap</code>存储key两次(一次在map中,一次在数组中)和value一次.同时需要更高级别的常量来存储数组的长度和前缀</li><li><code>LookupMap</code>存储key,value各一次</li></ul><h4 id="LazyOption"><a href="#LazyOption" class="headerlink" title="LazyOption"></a><code>LazyOption</code></h4><p>这是一个只存储单个值的持久化集合,目标是阻止合约在不需要使用该值时进行反序列化.一个例子是存在一个大的元数据块,它只在<code>view</code>调用中使用,在大多数合约操作中不需要使用.</p><p>它的作用类似于<code>Option</code>,可以保存值们也可以不保存值,同时还需要一个唯一的前缀,就像其他持久化集合一样.</p><p>与其他集合一样,LazyOption只允许在初始化过程中初始化值.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> metadata<span class="token punctuation">:</span> <span class="token class-name">LazyOption</span><span class="token operator">&lt;</span><span class="token class-name">Metadata</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]</span><span class="token attribute attr-name">#[serde(crate = <span class="token string">"near_sdk::serde"</span>)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Metadata</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    image<span class="token punctuation">:</span> <span class="token class-name">Base64Vec</span><span class="token punctuation">,</span>    blobs<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[init]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>metadata<span class="token punctuation">:</span> <span class="token class-name">Metadata</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            metadata<span class="token punctuation">:</span> <span class="token class-name">LazyOption</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"m"</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_metadata</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Metadata</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// `.get()` reads and deserializes the value from the storage. </span>        <span class="token keyword">self</span><span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集合嵌套"><a href="#集合嵌套" class="headerlink" title="集合嵌套"></a>集合嵌套</h4><h5 id="使用传统方式构造唯一前缀"><a href="#使用传统方式构造唯一前缀" class="headerlink" title="使用传统方式构造唯一前缀"></a>使用传统方式构造唯一前缀</h5><p>在构造函数中使用一个硬编码的短字母前缀,该前缀将转换为字节 vector.使用嵌套集合,该前缀必须手动构造</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[init]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            accounts<span class="token punctuation">:</span> <span class="token class-name">UnorderedMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            tokens<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            metadata<span class="token punctuation">:</span> <span class="token class-name">LazyOption</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">b"m"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">get_tokens</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AccountId</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">UnorderedSet</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>account_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Constructing a unique prefix for a nested UnorderedSet.</span>            <span class="token keyword">let</span> <span class="token keyword">mut</span> prefix <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Adding unique prefix.</span>            prefix<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">b's'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Adding the hash of the account_id (key of the outer map) to the prefix.</span>            <span class="token comment">// This is needed to differentiate across accounts.</span>            prefix<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">sha256</span><span class="token punctuation">(</span>account_id<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UnorderedSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokens    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="为持久化容器生产前缀"><a href="#为持久化容器生产前缀" class="headerlink" title="为持久化容器生产前缀"></a>为持久化容器生产前缀</h5><p>每个持久化容器都需要一个唯一的前缀.该前缀被用于生成内部的键以持久化的存储数据.这些内部的键必须是唯一的以避免冲突(包括 <code>STATE</code> 的键冲突)<br>当一个合约变的复杂,可能会有多个不同的集合,他们不是主结构的全部组成部分.而是子结构或嵌套容易,他们都需要唯一的前缀<br>我们可以引入一个 <code>enum</code> 来追踪存储前缀和键.然后它们使用 borsh 序列化来为每个容器构造一个唯一的前缀.<br>它与手工构造一样高效,因为 borsh 序列化,一个<code>enum</code>只需要 1 个 字节</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span></span><span class="token class-name">BorshStorageKey</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(BorshStorageKey, BorshSerialize)]</span><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">StorageKeys</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Accounts</span><span class="token punctuation">,</span>    <span class="token class-name">SubAccount</span> <span class="token punctuation">&#123;</span> account_hash<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token class-name">Tokens</span><span class="token punctuation">,</span>    <span class="token class-name">Metadata</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[init]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            accounts<span class="token punctuation">:</span> <span class="token class-name">UnorderedMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">StorageKeys</span><span class="token punctuation">::</span><span class="token class-name">Accounts</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            tokens<span class="token punctuation">:</span> <span class="token class-name">LookupMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">StorageKeys</span><span class="token punctuation">::</span><span class="token class-name">Tokens</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            metadata<span class="token punctuation">:</span> <span class="token class-name">LazyOption</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">StorageKeys</span><span class="token punctuation">::</span><span class="token class-name">Metadata</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">fn</span> <span class="token function-definition function">get_tokens</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AccountId</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">UnorderedSet</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>account_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UnorderedSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>                <span class="token class-name">StorageKeys</span><span class="token punctuation">::</span><span class="token class-name">SubAccount</span> <span class="token punctuation">&#123;</span> account_hash<span class="token punctuation">:</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">sha256</span><span class="token punctuation">(</span>account_id<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokens    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEAR </tag>
            
            <tag> near-sdk-rs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEAR SDK - 跨合约调用</title>
      <link href="//post/NEAR%20SDK%20-%20%E8%B7%A8%E5%90%88%E7%BA%A6%E8%B0%83%E7%94%A8.html"/>
      <url>//post/NEAR%20SDK%20-%20%E8%B7%A8%E5%90%88%E7%BA%A6%E8%B0%83%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>与工作量证明区块链不同,NEAR 协议是分片的,权益证明的区块链网络,当使用原生Rust(编译成 WASM)与智能合约交互时,跨合约调用是异步的.回调用来获取跨合约调用的结果或者用来获取跨合约调用是成功还是失败.</p><p>这里有两种进行跨合约调用的技术:<a href="https://github.com/near/near-sdk-rs/tree/master/examples/cross-contract-high-level">高级调用</a>和<a href="https://github.com/near/near-sdk-rs/tree/master/examples/cross-contract-low-level">低级调用</a>.本文档将聚焦于高级调用.Rust SDK 库中有两个示例演示了这些内容.如上面的连接所示.注意这些例子使用跨合约调用他们自身.我们将使用两个示例来演示高级调用.</p><h3 id="计算器示例"><a href="#计算器示例" class="headerlink" title="计算器示例"></a>计算器示例</h3><p><code>#[ext_contract(...)]</code>宏可以帮助你创建一个跨合约调用.它将使用一个 Rust Trait 并且转化为一个具有静态方法的模块.每个静态方法都接受 Trait 定义的位置参数,然后是 receiver_id,附带的存款和 gas 数量然后返回一个 <code>Promiss</code></p><p>例如,让我们定义一个计算器合约 Trait</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[ext_contract(ext_calculator)]</span><span class="token keyword">trait</span> <span class="token type-definition class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">mult</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token constant">U128</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">sum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token constant">U128</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价于:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">mod</span> <span class="token module-declaration namespace">ext_calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mult</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">,</span> receiver_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AccountId</span><span class="token punctuation">,</span> deposit<span class="token punctuation">:</span> <span class="token class-name">Balance</span><span class="token punctuation">,</span> gas<span class="token punctuation">:</span> <span class="token class-name">Gas</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>receiver_id<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">function_call</span><span class="token punctuation">(</span>                <span class="token string">b"mult"</span><span class="token punctuation">,</span>                <span class="token macro property">json!</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"a"</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                deposit<span class="token punctuation">,</span>                gas<span class="token punctuation">,</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">,</span> receiver_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AccountId</span><span class="token punctuation">,</span> deposit<span class="token punctuation">:</span> <span class="token class-name">Balance</span><span class="token punctuation">,</span> gas<span class="token punctuation">:</span> <span class="token class-name">Gas</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们假设计算器合约已经部署在了账户<code>calc.near</code>上,我们接下来可以这么做:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">const</span> <span class="token constant">CALCULATOR_ACCOUNT_ID</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"calc.near"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">NO_DEPOSIT</span><span class="token punctuation">:</span> <span class="token class-name">Balance</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">BASE_GAS</span><span class="token punctuation">:</span> <span class="token class-name">Gas</span> <span class="token operator">=</span> <span class="token number">5_000_000_000_000</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">sum_a_b</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> calculator_account_id<span class="token punctuation">:</span> <span class="token class-name">AccountId</span> <span class="token operator">=</span> <span class="token constant">CALCULATOR_ACCOUNT_ID</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">ext_calculator<span class="token punctuation">::</span></span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>calculator_account_id<span class="token punctuation">,</span> <span class="token constant">NO_DEPOSIT</span><span class="token punctuation">,</span> <span class="token constant">BASE_GAS</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="白名单示例"><a href="#白名单示例" class="headerlink" title="白名单示例"></a>白名单示例</h3><p>接下来我来看白名单智能合约的一个简单的跨合约调用,返回给定的用户是否在白名单里.<br>跨合约调用的常见模式是首先调用外部智能合约的方法.然后使用.then 语法来标记一个回调.最后在 promiss 中取回数据或状态.回调将在同样的环境中调用只能合约.回调函数使用了特殊的宏<code>#[privette]</code>.我们将在下面看到这个模式<br>下面的示例演示两个使用高级调用进行跨和调用的方式.当编写高级跨合约调用时,被调用的智能合约接口被设置为特殊的 trait .并且(通常的)由当前合约进行这个调用(在那里存在回调逻辑).按照惯例,第二个 trait 被称为 <code>ext_self</code>.</p><p>下面我们会看到一个简单的使用了两个 trait的示例:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[ext_contract(ext_self)]</span><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">ExtSelf</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">callback_promise_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">callback_arg_macro</span><span class="token punctuation">(</span><span class="token attribute attr-name">#[callback]</span> val<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[ext_contract(ext_whitelist)]</span><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">ExtWhitelist</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">is_whitelisted</span><span class="token punctuation">(</span>staking_pool_account_id<span class="token punctuation">:</span> <span class="token class-name">AccountId</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建这些 trait 后,我们展示两个简单的函数,他们将进行白名单合约的跨合约调用.询问账户 <code>mike.testnet</code> 是否在白名单中.这两个方法都返回 bool 值.首先我们来看看方法,然后让我们来看看回调函数的区别.注意,简单起见,本例中的值是硬编码的.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">XCC_GAS</span><span class="token punctuation">:</span> <span class="token class-name">Gas</span> <span class="token operator">=</span> <span class="token number">20000000000000</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">get_whitelist_contract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">AccountId</span> <span class="token punctuation">&#123;</span>    <span class="token string">"whitelist.demo.testnet"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">get_account_to_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">AccountId</span> <span class="token punctuation">&#123;</span>    <span class="token string">"mike.testnet"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">xcc_use_promise_result</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">ext_whitelist<span class="token punctuation">::</span></span><span class="token function">is_whitelisted</span><span class="token punctuation">(</span><span class="token function">get_account_to_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">get_whitelist_contract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">XCC_GAS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token namespace">ext_self<span class="token punctuation">::</span></span><span class="token function">callback_promise_result</span><span class="token punctuation">(</span>                <span class="token operator">&amp;</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">current_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token constant">XCC_GAS</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">xcc_use_arg_macro</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">ext_whitelist<span class="token punctuation">::</span></span><span class="token function">is_whitelisted</span><span class="token punctuation">(</span><span class="token function">get_account_to_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">get_whitelist_contract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">XCC_GAS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token namespace">ext_self<span class="token punctuation">::</span></span><span class="token function">callback_arg_macro</span><span class="token punctuation">(</span>                <span class="token operator">&amp;</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">current_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token constant">XCC_GAS</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>ext_whitelist::is_whitelisted..</code>开始的语法给我们展示了如何使用 trait 来调用方法<code>is_whitelisted</code>.然而,该 trait 只有一个参数,我们却传入了 4 个参数.其中后面 3 个参数将在幕后使用:</p><ol><li>目标合约账户(例如:<code>whitelist.demo.testnet</code>)</li><li>附带的 Ⓝ存款,单位为 yocto Ⓝ(1 Ⓝ &#x3D; 1000000000000000000000000 yoctoⓃ.)</li><li>gas 数量</li></ol><p>代码片段中的两个方法非常相似,除了他们各自使用了不同的回调 <code>callback_promise_result</code> 和 <code>callback_arg_macro</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[private]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">callback_promise_result</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">promise_results_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ERR_TOO_MANY_RESULTS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">promise_result</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PromiseResult</span><span class="token punctuation">::</span><span class="token class-name">NotReady</span> <span class="token operator">=></span> <span class="token macro property">unreachable!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">PromiseResult</span><span class="token punctuation">::</span><span class="token class-name">Successful</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>is_whitelisted<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span>serde_json<span class="token punctuation">::</span></span><span class="token function">from_slice</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                is_whitelisted            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">b"ERR_WRONG_VAL_RECEIVED"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">PromiseResult</span><span class="token punctuation">::</span><span class="token class-name">Failed</span> <span class="token operator">=></span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">b"ERR_CALL_FAILED"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[private]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">callback_arg_macro</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token attribute attr-name">#[callback]</span> val<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    val<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个回调展示了如何获得值.第一个方法从 promise result 中获取值,第二个在参数中使用了宏来将值转化为所需的值.请注意,第二种方式没有第一种方式那么容易捕获错误.</p><p>这两种方式最大的不同是参数是如何定义的.</p><p>这就是所有的内容了.理解如何创建一个跨合约调用并且接收返回值是在 NEAR 上开发智能合约非常重要的一部分.</p>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEAR </tag>
            
            <tag> near-sdk-rs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEAR SDK - 合约接口</title>
      <link href="//post/NEAR%20SDK%20-%20%E5%90%88%E7%BA%A6%E6%8E%A5%E5%8F%A3.html"/>
      <url>//post/NEAR%20SDK%20-%20%E5%90%88%E7%BA%A6%E6%8E%A5%E5%8F%A3.html</url>
      
        <content type="html"><![CDATA[<h3 id="公共方法类型"><a href="#公共方法类型" class="headerlink" title="公共方法类型"></a>公共方法类型</h3><h4 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h4><p>在#[near_bindgen]宏包裹下的函数可以使用 <code>pub</code>标识符修饰,这样当它编译成<code>WASM</code>字节码以后就可以被外部调用 </p><p>只讲能在外部调用的方法标记成<code>public</code>是很重要的.如果你需要合约自身来调用,你可以标记该方法为公共的但是添加<code>#[private]</code>修饰,这样除了合约自身的调用,任何调用都会导致<code>panic</code></p><p>基本的用法如下所示:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">MyContractStructure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">some_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// .. method logic here</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将从WASM二进制码中公开some_method,任何人都可以访问它</p><details class="custom-details"><summary>展开显示生成的代码</summary><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">"wasm32"</span>)]</span><span class="token attribute attr-name">#[no_mangle]</span><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">fn</span> <span class="token function-definition function">some_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">setup_panic_hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">attached_deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Method some_method doesn\'t accept deposit"</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> contract<span class="token punctuation">:</span> <span class="token class-name">MyContractStructure</span> <span class="token operator">=</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">state_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    contract<span class="token punctuation">.</span><span class="token function">some_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">state_write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>contract<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></details><h4 id="公开trait实现"><a href="#公开trait实现" class="headerlink" title="公开trait实现"></a>公开trait实现</h4><p>函数也能够公开自己的trait实现.这有助于在合约中实现共有的接口或标准.下面的代码与<code>pub</code>的基础用法很相似,除了<code>#[near_bindgen]</code>宏只需要附属在trait的实现上,而无需附属与trait本身.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">MyTrait</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">trait_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">MyTrait</span> <span class="token keyword">for</span> <span class="token class-name">MyContractStructure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">trait_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// .. method logic here</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中,生成的代码与前一个例子相同,只是方法名不一样</p><details class="custom-details"><summary>展开显示生成的代码</summary><p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">"wasm32"</span>)]</span><span class="token attribute attr-name">#[no_mangle]</span><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">fn</span> <span class="token function-definition function">trait_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">setup_panic_hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">attached_deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Method trait_method doesn\'t accept deposit"</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> contract<span class="token punctuation">:</span> <span class="token class-name">MyContractStructure</span> <span class="token operator">=</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">state_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    contract<span class="token punctuation">.</span><span class="token function">trait_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">state_write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>contract<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></details><h3 id="合约状态可变性"><a href="#合约状态可变性" class="headerlink" title="合约状态可变性"></a>合约状态可变性</h3><p>合约状态可变性是通过函数参数中的<code>self</code>参数是怎样的来自动处理的.根据使用的是哪一个,<code>#[near_bindgen]</code>宏将生成相应的代码来加载&#x2F;反序列化任何使用<code>self</code>的函数的状态，序列化&#x2F;存储状态只在使用<code>&amp;mut self</code>时使用。</p><h4 id="只读函数"><a href="#只读函数" class="headerlink" title="只读函数"></a>只读函数</h4><p>以不可变的方式调用合约时,交易结束时不会覆写任何状态.你可以通过使用&amp;self 或者 self 作为参数.他们都将生成同样的代码去加载并反序列化状态到结构体中,然后调用函数.不同的是,self 会将变量的所有权移动进函数中,&amp;self 仅仅将 self 的引用移动进函数中.</p><p>下面是一个例子:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, Default)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyContractStructure</span> <span class="token punctuation">&#123;</span>    integer<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">MyContractStructure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_values</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>integer<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log_state_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有适用于所有情况的通用准则,但有一些核心规则需要遵守:</p><ul><li><p><code>self</code> 如果在函数中移动了 self 的值或者其包含的值时使用 <code>self</code> 作为参数是很有用的,因为这样减少了 <code>copy</code> 和 <code>clone</code> 的操作</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// View method. More efficient, but can't be reused internally, because it consumes self.</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_owner_id</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">AccountId</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>owner_id<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>&amp;self</code>当值需要只读的合约状态,或者函数使用了一些方法来获得了可用的所有权时使用<code>&amp;self</code>.如果结构体使用了大量内存,这很有用,可以避免将大量的数据转移进函数作用域中.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// View method. Requires cloning the account id.</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_owner_id</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">AccountId</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>owner_id<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>返回派生数据</code></p><p>有些少见的情况需要我们通过只读的方式来返回从存储中获取并修改的数据.如下面所示:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// View method that "modifies" state, for code structure or computational</span><span class="token comment">/// efficiency reasons. Changes state in-memory, but does NOT save the new</span><span class="token comment">/// state. If called internally by a change method, WILL result in updated</span><span class="token comment">/// contract state.</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">update_stats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> account_id<span class="token punctuation">:</span> <span class="token class-name">AccountId</span><span class="token punctuation">,</span> score<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> account <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">panic_str</span><span class="token punctuation">(</span><span class="token string">"ERR_ACCT_NOT_FOUND"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    account<span class="token punctuation">.</span>total <span class="token operator">+=</span> score<span class="token punctuation">;</span>    account<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><p>可变的函数允许加载存在的状态,然后对它进行修改,最后当方法调用结束后重新将状态写入</p><p>这应该用于任何修改合约状态的交易中.注意,序列化的合约数据存在键 <code>STATE</code> 下持久化存储中.</p><p>一个可变函数的例子:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, Default)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyContractStructure</span> <span class="token punctuation">&#123;</span>    integer<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">MyContractStructure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">modify_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> new_value<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>integer <span class="token operator">=</span> new_value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">increment_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>integer <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p>这一类函数根本不使用 self,也不需要从存储中读取或者写入合约状态</p><p>使用公共的纯函数的情况很少,但是返回嵌入到合约代码中的数据或执行一些不依赖合约状态的静态共享逻辑时可能很有用</p><p>一个纯函数的例子:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">const</span> <span class="token constant">SOME_VALUE</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">MyContractStructure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log_message</span><span class="token punctuation">(</span><span class="token comment">/* Parameters here */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">near_sdk<span class="token punctuation">::</span></span><span class="token macro property">log!</span><span class="token punctuation">(</span><span class="token string">"inside log message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log_u64</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">near_sdk<span class="token punctuation">::</span></span><span class="token macro property">log!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">return_static_u64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u64</span> <span class="token punctuation">&#123;</span>        <span class="token constant">SOME_VALUE</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><h4 id="何时使用回调"><a href="#何时使用回调" class="headerlink" title="何时使用回调"></a>何时使用回调</h4><p>通常,当合约必须为一个远程交叉合约调用进行回调时,这个回调方法必须只能被合约自身调用.这能避免有人直接调用它而搞乱合约状态.更常见的模式是使用断言来验证直接调用者(predecessor account ID)是否是合约自己的账户(current account ID).<code>#[private]</code>宏会简化这个操作,提高代码可读性.</p><p>在<code>near_bindgen</code>宏包裹的代码里使用这个标注,例如:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[private]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">my_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    …<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码等价于</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">my_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">current_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">predecessor_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Method method is private"</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在通过这个标注,只有合约账户本身可以调用这个方法,可以直接调用也可以通过哦Promise</p><h4 id="编写内部方法"><a href="#编写内部方法" class="headerlink" title="编写内部方法"></a>编写内部方法</h4><p>不是所有的方法都需要暴露为公开的,为 helper 或 uility 函数编写私有的方法也许更加有益.下面是三种编写内部方法的途径</p><ul><li><p>使用 <code>fn</code> 替换 <code>pub fn</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">helper_method</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  …<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>pub(crate) fn</code>.这将有助于在不同的模块中使用内部函数</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// Function that can be called in another Rust file</span><span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_first_name</span><span class="token punctuation">(</span>account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  …<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分散的<code>impl</code>块</p><p>另外一种不暴露方法的方式是有一个单独的<code>impl Contract</code>部分,并且这部分不使用<code>#[near_bindgen]</code>宏</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">internal_increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/// This methods is still not exported.</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">internal_increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="可支付方法"><a href="#可支付方法" class="headerlink" title="可支付方法"></a>可支付方法</h3><p>我们可以允许方法在函数调用时接受代币转移.这样做是为了让合约能够使用的时候定义其需要的代币费用.默认的方法是不可支付的,如果调用时尝试转移代币会导致 panic.这样做是因为安全原因,以免有人在函数调用时意外地转移代币</p><p>使用#[payable]标注来申明方法是可支付的.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[payable]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">my_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这将允许通过调用my_method方法来转移资产给合约</p><p>例子:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[payable]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">take_my_money</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">log_str</span><span class="token punctuation">(</span><span class="token string">"Thanks!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">do_not_take_my_money</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">log_str</span><span class="token punctuation">(</span><span class="token string">"Thanks!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价于:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">take_my_money</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">log_str</span><span class="token punctuation">(</span><span class="token string">"Thanks!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">do_not_take_my_money</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">attached_deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token namespace">near_sdk<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">b"Method do_not_take_my_money doesn't accept deposit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">log_str</span><span class="token punctuation">(</span><span class="token string">"Thanks!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列化协议"><a href="#序列化协议" class="headerlink" title="序列化协议"></a>序列化协议</h3><p>SDK 中的序列化规则定义了结构体数据如何转化成字节,当需要传输数据到合约方法中或存储数据到状态中时.对于方法参数,SDK 接受JSON(默认)和 Borsh,对于存储数据在链上,使用 Borsh.</p><h4 id="JSON-和-Borsh-的特点如下"><a href="#JSON-和-Borsh-的特点如下" class="headerlink" title="JSON 和 Borsh 的特点如下:"></a>JSON 和 Borsh 的特点如下:</h4><p>JSON:</p><ul><li>人类可读</li><li>自解释样式(不需要知道底层类型)</li><li>与 JavaScript 的易互操作性</li><li>低效率的(反)序列化<br>Borsh</li><li>紧凑的二进制格式可以高效率的进行数据的序列化和反序列化</li><li>需要知道数据格式或者有一个模板来反序列化数据</li><li>严格规范的二进制表示</li><li>在大多数情况下,快速并且开销更小<br>通常来说,JSON 用于合约调用和交叉合约调用以实现更好的适用性,Borsh 被用于优化合约中更小的参数序列化和更少的反序列化计算开销,以减少 gas 使用.</li></ul><h4 id="重载默认的序列化协议"><a href="#重载默认的序列化协议" class="headerlink" title="重载默认的序列化协议"></a>重载默认的序列化协议</h4><p>结果和参数的序列化可以分开选择.但是所有的参数必须使用同样的样式(不能使用 borsh 序列化一部分参数,另外的参数使用 JSON 序列化).<br>下面的例子是同时使用 borsh 来序列化返回值和参数</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[result_serializer(borsh)]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">sum_borsh</span><span class="token punctuation">(</span><span class="token attribute attr-name">#[serializer(borsh)]</span> a<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token attribute attr-name">#[serializer(borsh)]</span> b<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-result_serializer(borsh)```标注会重载默认的返回值的序列化协议,从" data-language="result_serializer(borsh)```标注会重载默认的返回值的序列化协议,从"><div class="caption"><span>JSON 重载为 borsh,```serializer(borsh)```标注将重载参数的序列化协议</span></div><code class="language-result_serializer(borsh)```标注会重载默认的返回值的序列化协议,从">下面是在单元测试中使用 Borsh 序列化,并且使用 base64 编码的方法&#96;&#96;&#96;rust&#x2F;&#x2F;&#x2F; This test is simply a helper to print out the base64 value.#[test]fn borsh_simple() &#123;    let status_message &#x3D; &quot;Aloha honua!&quot;.to_string();    let borsh_input &#x3D; SetMessageInput &#123;        msg: status_message.clone()    &#125;;    let borsh_serialized: Vec&lt;u8&gt; &#x3D; borsh_input.try_to_vec().unwrap();    let base64_encoded &#x3D; near_primitives::serialize::to_base64(borsh_serialized.as_slice());    println!(&quot;Using NEAR CLI, this is the base64-encoded value to use: &#123;:?&#125;&quot;, base64_encoded);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面展示了在 CLI 中使用这个值的代码片段.注意,该方法没有返回值,所以不需要使用#[result_serializer(borsh)]来标注返回值</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_status_borsh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token attribute attr-name">#[serializer(borsh)]</span> message<span class="token punctuation">:</span> <span class="token class-name">SetMessageInput</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>records<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>他们使用了这个简单的结构体:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">SetMessageInput</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Note that the key does not have to be "message" like the argument name.</span>    msg<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在NEAR CLI中调用方法如下:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near call rust-status-message.demo.testnet set_status_borsh --base64 &#39;DAAAAEFsb2hhIGhvbnVhIQ&#x3D;&#x3D;&#39; --accountId demo.testnet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="JSON-包装类型"><a href="#JSON-包装类型" class="headerlink" title="JSON 包装类型"></a>JSON 包装类型</h4><p>为了帮助将某些类型序列化为 JSON,这些类型有意想不到或低效的默认格式,在 <code>near_sdk::json_types</code> 里有一些包装器类型可以使用<br>因为 JavaScript 只支持整数类型的值到 2^53-1,如果反序列化 JSON 整型超过了这个范围,你将丢失精度.为了抵消这种影响,你可以使用 <code>I64</code>,<code>U64</code>,<code>I128</code> 和 <code>U128</code> 类型来代替这些参数或结果的本地类型,将值序列化为字符串.默认情况下,所有整数类型都将序列化为 JSON 中的整型<br>你能使用 <code>std::convert::Into</code> 来将 <code>U64</code> 转化为 <code>u64</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mult</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token constant">U128</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以使用<code>.0</code>来访问内部值</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mult</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token constant">U128</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//let a: u64 = a.into();</span>        <span class="token keyword">let</span> a <span class="token operator">=</span> a<span class="token number">.0</span><span class="token punctuation">;</span>        <span class="token comment">//let b: u64 = b.into();</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> b<span class="token number">.0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时,你还可以使用<code>U64(...)</code>和<code>U128(...)</code>来转化<code>u64</code>和<code>u128</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span> <span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mult</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token constant">U128</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">let</span> a <span class="token operator">=</span> a<span class="token number">.0</span><span class="token punctuation">;</span>         <span class="token keyword">let</span> b <span class="token operator">=</span> b<span class="token number">.0</span><span class="token punctuation">;</span>         <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//product.into()</span>         <span class="token constant">U128</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合起来使用:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mult</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">U64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token constant">U128</span> <span class="token punctuation">&#123;</span>        <span class="token constant">U128</span><span class="token punctuation">(</span><span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token number">.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">u128</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>b<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽管JSON 包装类型只包含在 SDK 中,但是任何类型都可以使用,只要它各自实现了 serder 序列化和反序列化.所有这些类型都覆写了 JSON 格式并且与内部类型具有一致的 borsh 序列化和反序列特性</p><h4 id="Base64VecU8"><a href="#Base64VecU8" class="headerlink" title="Base64VecU8"></a>Base64VecU8</h4><p>另外一个覆写默认序列化的例子是 Vec<u8>,它用来表示 Rust 中的字节.默认实现下,它将序列化为整型数组,这是不紧凑而且很难使用的.有一个包装类型Base64VecU8,它能序列化和反序列化 Base64 字符串再 JSON 的序列化中获得更多的紧凑性</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[near_bindgen]</span><span class="token attribute attr-name">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Notice, internally we store `Vec&lt;u8>` </span>    <span class="token keyword">pub</span> data<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[init]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token class-name">Base64VecU8</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">:</span> data<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_data</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Base64VecU8</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEAR </tag>
            
            <tag> near-sdk-rs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEAR SDK Promise</title>
      <link href="//post/NEAR%20SDK%20-%20Promise.html"/>
      <url>//post/NEAR%20SDK%20-%20Promise.html</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>合约能够通过 Promise 异步的发送交易.就像其他编程语言中的Promise 一样,它可以让代码在未来执行.”在未来”意味着交易将在下一个区块(或附近)执行,而不会在初始调用的区块执行.<br>你可以使用 Promise实现任何跨合约调用链.它介于之前所说的高级调用和低级调用之间.查阅上面完整的 Promise 文档以获得更多细节<br>当然,在很少的情况下,Promise 拥有特殊的能力,因为这些情况都不需要函数调用</p><ul><li>发送 NEAR 代币</li><li>创建账户</li><li>部署合约</li></ul><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p>为什么要等待</p><p>为什么不让交易是同步进行的.在同样的区块完成方法调用?为什么 NEAR 需要 Promise 来发送代币,创建账户和部署合约?<br>他们需要在单独的块中进行调度,因为发送者和接收者可能位于不同的分片中,跨分片通信发生在多个块之间,通过 收据(receipts),你可以将收据理解为 NEAR 的内部交易.你能在 <a href="https://hexo.io/docs/one-command-deployment.html">NEAR Explorer</a> 中看到收据是怎么从一个块传输到另一个块中.</p></div><h4 id="发送-NEAR"><a href="#发送-NEAR" class="headerlink" title="发送$NEAR"></a>发送$NEAR</h4><p>你可能有很多原因想要从合约发送代币:</p><ul><li>合约使用了类似存储标准的协议,需要再用户注销时返还资金</li><li>用户支付 token 给合约,然后合约稍后支付费用给维护人员,重新分配给用户或者通过用户投票的结果支付给其他人</li><li>更多…</li></ul><p>区块链给了我们可编程的货币,智能合约支付货币是这种能力的核心<br>NEAR 让这变的简单,如果你想要从合约中转移代币,下面是你需要做的全部:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> amount<span class="token punctuation">:</span> <span class="token keyword">u128</span> <span class="token operator">=</span> <span class="token number">1_000_000_000_000_000_000_000_000</span><span class="token punctuation">;</span> <span class="token comment">// 1 $NEAR as yoctoNEAR</span><span class="token keyword">let</span> account_id<span class="token punctuation">:</span> <span class="token class-name">AccountId</span> <span class="token operator">=</span> <span class="token string">"example.near"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>account_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p><p>本文档描述的 AccountId 行为是 neaer-sdk-rs v4 的特性.这个功能在 v3 中依然可以使用,但如果你想使用更干净的 v4 语法,编写你的Cargo.toml</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span>near<span class="token operator">-</span>sdk <span class="token operator">=</span> <span class="token string">"4.0.0-pre.2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p></div><p>完整的合约上下文像下面这样</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">json_types<span class="token punctuation">::</span></span><span class="token constant">U128</span><span class="token punctuation">,</span> near_bindgen<span class="token punctuation">,</span> <span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">Promise</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">pay</span><span class="token punctuation">(</span>amount<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token class-name">AccountId</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token number">.0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中大部分是你已经熟悉的样板.像 imports,设置 near_bindgen,borsh.下面是一些与转账有关的有趣细节:</p><ul><li><p>大写的 U 的 U128,这里的 pay 方法定义了接受 JSON 作为输入,但是 JSON 数字不能超过 2^53,也就是 9 后面只跟了 15 个 0,因为传输时使用的数量是以 yoctoNEAR 为单位,似乎需要比 2^53 大的多的数字<br>  当方法接受 U128 位输入时,这意味着调用者需要将数字转化成 string.near-sdk-rs 将 string 转化为 U128,它是 Rust 原生的 u128 的包装类.底层的 u128 可以通过.0 来使用.例如 transfer(amount.0)</p></li><li><p>AccountId:这个类型会自动的检查提供的 string 是否很好的匹配了 NEAR 账户 ID 的规则.当不匹配时 panic</p></li><li><p>返回 Promise:这将允许 NEAR Explorer,near-cli,near-api-js.和其他工具正确的判断整个交易链是否成功.如果你的函数没有返回 Promise.类似于 near-cli 会在你的调用后立刻返回.并且即使 transfer 失败,你的函数调用也会确认为成功.<a href="https://github.com/near-examples/rust-high-level-cross-contract/pull/73#issuecomment-902849410">这里</a>有相关的例子.<br>使用 near-cli 来调用函数:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near call $CONTRACT pay &#39;&#123;&quot;amount&quot;: &quot;1000000000000000000000000&quot;, &quot;to&quot;: &quot;example.near&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="发送-NEAR-1"><a href="#发送-NEAR-1" class="headerlink" title="发送$NEAR"></a>发送$NEAR</h3><p>你可能有很多原因想要从合约发送代币:</p><ul><li>合约使用了类似存储标准的协议,需要再用户注销时返还资金</li><li>用户支付 token 给合约,然后合约稍后支付费用给维护人员,重新分配给用户或者通过用户投票的结果支付给其他人</li><li>更多…</li></ul><p>区块链给了我们可编程的货币,智能合约支付货币是这种能力的核心<br>NEAR 让这变的简单,如果你想要从合约中转移代币,你只需要:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> amount<span class="token punctuation">:</span> <span class="token keyword">u128</span> <span class="token operator">=</span> <span class="token number">1_000_000_000_000_000_000_000_000</span><span class="token punctuation">;</span> <span class="token comment">// 1 $NEAR as yoctoNEAR</span><span class="token keyword">let</span> account_id<span class="token punctuation">:</span> <span class="token class-name">AccountId</span> <span class="token operator">=</span> <span class="token string">"example.near"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>account_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在一个完整的合约和函数上下文中,你可以这样发送$NEAR</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">json_types<span class="token punctuation">::</span></span><span class="token constant">U128</span><span class="token punctuation">,</span> near_bindgen<span class="token punctuation">,</span> <span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">Promise</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">pay</span><span class="token punctuation">(</span>amount<span class="token punctuation">:</span> <span class="token constant">U128</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token class-name">AccountId</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token number">.0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子中的大部分内容你应该已经很熟悉了.比如<code>near_bindgen</code>,<code>borsh</code>,下面是一些与$NEAR的发送有关的细节:</p><ul><li>大写的 <code>U</code> 的 <code>U128</code>,这里的 <code>pay</code> 方法定义了接受 JSON 作为输入,但是 JSON 数字不能超过 2^53,也就是 9 后面跟15 个 0,因为传输时使用的数量是以 yoctoNEAR 为单位,我们似乎需要比 2^53 大的多的数字<br>  当方法接受 <code>U128</code> 位输入时,这意味着调用者需要将数字转化成 <code>string</code>.<code>near-sdk-rs</code> 将 <code>string</code> 转化为 <code>U128</code>,它是 Rust 原生的 <code>u128</code> 的包装类.底层的 <code>u128</code> 可以通过<code>.0</code> 来使用.例如 <code>transfer(amount.0)</code></li><li><code>AccountId</code>:这个类型会自动的检查提供的 string 是否很好的匹配了 NEAR 账户 ID 的规则.当不匹配时 panic</li><li>返回 <code>Promise</code>:这将允许 NEAR Explorer,near-cli,near-api-js.和其他工具正确的判断整个交易链是否成功.如果你的函数没有返回 <code>Promise</code>.near-cli这样的工具 会在你的调用后立刻返回.并且即使 transfer 失败,你的函数调用也会确认为成功.你能看到相关例子在<a href="https://github.com/near-examples/rust-high-level-cross-contract/pull/73#issuecomment-902849410">这里</a></li></ul><p>使用 near-cli 来调用函数:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">near call $CONTRACT pay &#39;&#123;&quot;amount&quot;: &quot;1000000000000000000000000&quot;, &quot;to&quot;: &quot;example.near&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><p>你可能会有很多原因需要从合约中创建账户.一个例子;你想要用户渐进式的参与,在一开始时隐藏 NEAR 的概念,然后自动为他们创建账户(可能是你的账户的子账户,类似于 user123.some-cool-game.near).<br>因为没有余额的账户几乎不能使用,你可能想要将其与上一页中的代币转移结合使用.你需要给定这个账户一个访问秘钥.就像下面做的这样</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"subaccount.example.near"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">create_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add_full_access_key</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_pk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">250_000_000_000_000_000_000_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.5e23yN, 0.25N</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完整的合约上下文如下:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>env<span class="token punctuation">,</span> near_bindgen<span class="token punctuation">,</span> <span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">Balance</span><span class="token punctuation">,</span> <span class="token class-name">Promise</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">INITIAL_BALANCE</span><span class="token punctuation">:</span> <span class="token class-name">Balance</span> <span class="token operator">=</span> <span class="token number">250_000_000_000_000_000_000_000</span><span class="token punctuation">;</span> <span class="token comment">// 2.5e23yN, 0.25N</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[private]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_subaccount</span><span class="token punctuation">(</span>prefix<span class="token punctuation">:</span> <span class="token class-name">AccountId</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> subaccount_id <span class="token operator">=</span> <span class="token class-name">AccountId</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span>          <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;.&#123;&#125;"</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">current_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>subaccount_id<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">create_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add_full_access_key</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_pk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token constant">INITIAL_BALANCE</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的事:</p><ul><li><code>add_full_access_key</code> - 该示例使用了进行方法调用并签署了原始交易的人或app的公钥(<code>singner_account_pk</code>),你也可以使用<code>add_access_key</code>来添加<code>Function Call</code>访问键,该访问键允许用户调用预先定义好的一组合约方法.</li><li><code>#[private]</code> - 如果你有一个方法将会使用你的合约存款.你可能希望以某种方式保护它不被攻击.这里例子用了一个过于简单的方法–标注<code>#[private]</code>宏</li><li><code>INITTIAL_BALANCE</code>使用near-sdk-rs中的<code>Balance</code>类型.现在它简单的等价于<code>u128</code>,但它将来可能会扩展出额外的方法,就像最近对<a href="https://github.com/near/near-sdk-rs/pull/471"><code>Gas</code>类型做的那样</a>类型做的那样</li></ul><h3 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h3><p>出于一下几种原因,你可能希望你的智能合约能部署后续的智能合约代码:</p><ul><li>该合约使用工厂模式,在这个模式中,父合约创建很多子合约(Mintbase使用这种模式为任何想要创建NFT商店的人创建一个NFT商店,彩虹桥也使用这种模式为每个桥接代币创建特定的代币合约)</li><li>合约等待投票通过后更新其自身的代码</li><li>你可以实现一个”合约用户化”系统为每个用户创建特定应用的子账户并且为他们部署同样的合约.因为NEAR存储费的原因,这样的系统是非常昂贵的,但在未来可能会进行优化.如果优化实现了,那么这种”应用分片设计”可能会有更好的伸缩性和以用户为中心的合约标准和应用机制.这种范式的早期实现被称为<a href="https://github.com/metanear">Meta NEAR</a></li></ul><p>如果你的目标是像Mintbase或彩虹桥一样需要在主合约中部署子合约账户.你还需要创建账户.所以,你需要合并前面提高的概念.下面是你需要的:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">const</span> <span class="token constant">CODE</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token macro property">include_bytes!</span><span class="token punctuation">(</span><span class="token string">"./path/to/compiled.wasm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"subaccount.example.near"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">create_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add_full_access_key</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_pk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">3_000_000_000_000_000_000_000_000</span><span class="token punctuation">)</span> <span class="token comment">// 3e24yN, 3N</span>    <span class="token punctuation">.</span><span class="token function">deploy_contract</span><span class="token punctuation">(</span><span class="token constant">CODE</span><span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是完整的合约的可能的样子,使用了一种天真的方式来传递code而不是使用<code>include_bytes!</code>硬编码它</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">near_sdk<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>env<span class="token punctuation">,</span> near_bindgen<span class="token punctuation">,</span> <span class="token class-name">AccountId</span><span class="token punctuation">,</span> <span class="token class-name">Balance</span><span class="token punctuation">,</span> <span class="token class-name">Promise</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">INITIAL_BALANCE</span><span class="token punctuation">:</span> <span class="token class-name">Balance</span> <span class="token operator">=</span> <span class="token number">3_000_000_000_000_000_000_000_000</span><span class="token punctuation">;</span> <span class="token comment">// 3e24yN, 3N</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[near_bindgen]</span><span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[private]</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_child_contract</span><span class="token punctuation">(</span>prefix<span class="token punctuation">:</span> <span class="token class-name">AccountId</span><span class="token punctuation">,</span> code<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> subaccount_id <span class="token operator">=</span> <span class="token class-name">AccountId</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span>          <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;.&#123;&#125;"</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">current_account_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Promise</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>subaccount_id<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">create_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add_full_access_key</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">signer_account_pk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token constant">INITIAL_BALANCE</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">deploy_contract</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么这是一种天真的方法?因为4MB的交易大小限制.(上面的函数将对整个合约进行反序列化和堆分配).在许多情况下,<code>include_bytes!</code>方法是可取的.如果确实需要附加已编译的WASM作为参数,可以参考<a href="https://github.com/near-daos/sputnik-dao-contract/blob/a8fc9a8c1cbde37610e56e1efda8e5971e79b845/sputnikdao2/src/types.rs#L74-L142">Sputnik DAO v2</a>使用的方法</p>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEAR </tag>
            
            <tag> near-sdk-rs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
