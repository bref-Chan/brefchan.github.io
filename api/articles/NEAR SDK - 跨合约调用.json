{"title":"NEAR SDK - 跨合约调用","uid":"7ea6f8c776c9e4fb015c2ac37083b48f","slug":"NEAR SDK - 跨合约调用","date":"2022-03-11T12:11:22.994Z","updated":"2022-03-14T11:25:43.076Z","comments":true,"path":"api/articles/NEAR SDK - 跨合约调用.json","keywords":"区块链, NEAR Protocol, 智能合约, 夜影协议, NEAR","cover":null,"content":"<h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>与工作量证明区块链不同,NEAR 协议是分片的,权益证明的区块链网络,当使用原生Rust(编译成 WASM)与智能合约交互时,跨合约调用是异步的.回调用来获取跨合约调用的结果或者用来获取跨合约调用是成功还是失败.</p>\n<p>这里有两种进行跨合约调用的技术:<a href=\"https://github.com/near/near-sdk-rs/tree/master/examples/cross-contract-high-level\">高级调用</a>和<a href=\"https://github.com/near/near-sdk-rs/tree/master/examples/cross-contract-low-level\">低级调用</a>.本文档将聚焦于高级调用.Rust SDK 库中有两个示例演示了这些内容.如上面的连接所示.注意这些例子使用跨合约调用他们自身.我们将使用两个示例来演示高级调用.</p>\n<h3 id=\"计算器示例\"><a href=\"#计算器示例\" class=\"headerlink\" title=\"计算器示例\"></a>计算器示例</h3><p><code>#[ext_contract(...)]</code>宏可以帮助你创建一个跨合约调用.它将使用一个 Rust Trait 并且转化为一个具有静态方法的模块.每个静态方法都接受 Trait 定义的位置参数,然后是 receiver_id,附带的存款和 gas 数量然后返回一个 <code>Promiss</code></p>\n<p>例如,让我们定义一个计算器合约 Trait</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[ext_contract(ext_calculator)]</span>\n<span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Calculator</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">mult</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">U64</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">U64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>等价于:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">ext_calculator</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">mult</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token constant\">U64</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">U64</span><span class=\"token punctuation\">,</span> receiver_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> deposit<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Balance</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>receiver_id<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">function_call</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">b\"mult\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token macro property\">json!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> b <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                deposit<span class=\"token punctuation\">,</span>\n                gas<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">,</span> receiver_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> deposit<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Balance</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们假设计算器合约已经部署在了账户<code>calc.near</code>上,我们接下来可以这么做:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">const</span> <span class=\"token constant\">CALCULATOR_ACCOUNT_ID</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"calc.near\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">NO_DEPOSIT</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Balance</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">BASE_GAS</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gas</span> <span class=\"token operator\">=</span> <span class=\"token number\">5_000_000_000_000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sum_a_b</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">U128</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> calculator_account_id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccountId</span> <span class=\"token operator\">=</span> <span class=\"token constant\">CALCULATOR_ACCOUNT_ID</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">ext_calculator<span class=\"token punctuation\">::</span></span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>calculator_account_id<span class=\"token punctuation\">,</span> <span class=\"token constant\">NO_DEPOSIT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">BASE_GAS</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"白名单示例\"><a href=\"#白名单示例\" class=\"headerlink\" title=\"白名单示例\"></a>白名单示例</h3><p>接下来我来看白名单智能合约的一个简单的跨合约调用,返回给定的用户是否在白名单里.<br>跨合约调用的常见模式是首先调用外部智能合约的方法.然后使用.then 语法来标记一个回调.最后在 promiss 中取回数据或状态.回调将在同样的环境中调用只能合约.回调函数使用了特殊的宏<code>#[privette]</code>.我们将在下面看到这个模式<br>下面的示例演示两个使用高级调用进行跨和调用的方式.当编写高级跨合约调用时,被调用的智能合约接口被设置为特殊的 trait .并且(通常的)由当前合约进行这个调用(在那里存在回调逻辑).按照惯例,第二个 trait 被称为 <code>ext_self</code>.</p>\n<p>下面我们会看到一个简单的使用了两个 trait的示例:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[ext_contract(ext_self)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">ExtSelf</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">callback_promise_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">callback_arg_macro</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[callback]</span> val<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[ext_contract(ext_whitelist)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">ExtWhitelist</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">is_whitelisted</span><span class=\"token punctuation\">(</span>staking_pool_account_id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在创建这些 trait 后,我们展示两个简单的函数,他们将进行白名单合约的跨合约调用.询问账户 <code>mike.testnet</code> 是否在白名单中.这两个方法都返回 bool 值.首先我们来看看方法,然后让我们来看看回调函数的区别.注意,简单起见,本例中的值是硬编码的.</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">XCC_GAS</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gas</span> <span class=\"token operator\">=</span> <span class=\"token number\">20000000000000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_whitelist_contract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">AccountId</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"whitelist.demo.testnet\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_account_to_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">AccountId</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"mike.testnet\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">xcc_use_promise_result</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token namespace\">ext_whitelist<span class=\"token punctuation\">::</span></span><span class=\"token function\">is_whitelisted</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_account_to_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">get_whitelist_contract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">XCC_GAS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token namespace\">ext_self<span class=\"token punctuation\">::</span></span><span class=\"token function\">callback_promise_result</span><span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&amp;</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">current_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token constant\">XCC_GAS</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">xcc_use_arg_macro</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token namespace\">ext_whitelist<span class=\"token punctuation\">::</span></span><span class=\"token function\">is_whitelisted</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_account_to_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">get_whitelist_contract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">XCC_GAS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token namespace\">ext_self<span class=\"token punctuation\">::</span></span><span class=\"token function\">callback_arg_macro</span><span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&amp;</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">current_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token constant\">XCC_GAS</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从<code>ext_whitelist::is_whitelisted..</code>开始的语法给我们展示了如何使用 trait 来调用方法<code>is_whitelisted</code>.然而,该 trait 只有一个参数,我们却传入了 4 个参数.其中后面 3 个参数将在幕后使用:</p>\n<ol>\n<li>目标合约账户(例如:<code>whitelist.demo.testnet</code>)</li>\n<li>附带的 Ⓝ存款,单位为 yocto Ⓝ(1 Ⓝ = 1000000000000000000000000 yoctoⓃ.)</li>\n<li>gas 数量</li>\n</ol>\n<p>代码片段中的两个方法非常相似,除了他们各自使用了不同的回调 <code>callback_promise_result</code> 和 <code>callback_arg_macro</code></p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[private]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">callback_promise_result</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">promise_results_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERR_TOO_MANY_RESULTS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">match</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">promise_result</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PromiseResult</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotReady</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">unreachable!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">PromiseResult</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Successful</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>is_whitelisted<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_slice</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                is_whitelisted\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"ERR_WRONG_VAL_RECEIVED\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">PromiseResult</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Failed</span> <span class=\"token operator\">=></span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"ERR_CALL_FAILED\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[private]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">callback_arg_macro</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token attribute attr-name\">#[callback]</span> val<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">&#123;</span>\n    val\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这两个回调展示了如何获得值.第一个方法从 promise result 中获取值,第二个在参数中使用了宏来将值转化为所需的值.请注意,第二种方式没有第一种方式那么容易捕获错误.</p>\n<p>这两种方式最大的不同是参数是如何定义的.</p>\n<p>这就是所有的内容了.理解如何创建一个跨合约调用并且接收返回值是在 NEAR 上开发智能合约非常重要的一部分.</p>\n","text":"回调函数与工作量证明区块链不同,NEAR 协议是分片的,权益证明的区块链网络,当使用原生Rust(编译成 WASM)与智能合约交互时,跨合约调用是异步的.回调用来获取跨合约调用的结果或者用来获取跨合约调用是成功还是失败. 这里有两种进行跨合约调用的技术:高级调用和低级调用.本文档...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"文档翻译","slug":"文档翻译","count":7,"path":"api/categories/文档翻译.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":8,"path":"api/tags/NEAR.json"},{"name":"near-sdk-rs","slug":"near-sdk-rs","count":7,"path":"api/tags/near-sdk-rs.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">回调函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E5%99%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">计算器示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%99%BD%E5%90%8D%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">白名单示例</span></a></li></ol></li></ol>","author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"NEAR SDK - 合约结构","uid":"5e99360b3a18af11a239b4863047980f","slug":"NEAR SDK - 合约结构","date":"2022-03-14T06:18:47.231Z","updated":"2022-03-14T10:41:23.906Z","comments":true,"path":"api/articles/NEAR SDK - 合约结构.json","keywords":"区块链, NEAR Protocol, 智能合约, 夜影协议, NEAR","cover":null,"text":"near_bindgen#[near_bindgen]宏被用于结构体和方法实现中以生成必要的代码使其成为一个可用的NEAR合约并且暴露想要公开的方法并使其能够被外部调用 例如,下面是一个简单的计数合约,#[near_bindgen]宏被这样使用: use near_sdk::bo...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"文档翻译","slug":"文档翻译","count":7,"path":"api/categories/文档翻译.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":8,"path":"api/tags/NEAR.json"},{"name":"near-sdk-rs","slug":"near-sdk-rs","count":7,"path":"api/tags/near-sdk-rs.json"}],"author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NEAR SDK - 合约接口","uid":"0d7a924133f95db56db161e3fcf8a116","slug":"NEAR SDK - 合约接口","date":"2022-03-11T08:48:13.455Z","updated":"2022-03-11T12:10:32.483Z","comments":true,"path":"api/articles/NEAR SDK - 合约接口.json","keywords":"区块链, NEAR Protocol, 智能合约, 夜影协议, NEAR","cover":null,"text":"公共方法类型基础实现在#[near_bindgen]宏包裹下的函数可以使用 pub标识符修饰,这样当它编译成WASM字节码以后就可以被外部调用 只讲能在外部调用的方法标记成public是很重要的.如果你需要合约自身来调用,你可以标记该方法为公共的但是添加#[private]修饰,...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"文档翻译","slug":"文档翻译","count":7,"path":"api/categories/文档翻译.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":8,"path":"api/tags/NEAR.json"},{"name":"near-sdk-rs","slug":"near-sdk-rs","count":7,"path":"api/tags/near-sdk-rs.json"}],"author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}