{"title":"NEAR SDK - 合约接口","uid":"0d7a924133f95db56db161e3fcf8a116","slug":"NEAR SDK - 合约接口","date":"2022-03-11T08:48:13.455Z","updated":"2022-03-11T09:36:01.976Z","comments":true,"path":"api/articles/NEAR SDK - 合约接口.json","cover":null,"content":"<h3 id=\"公共方法类型\"><a href=\"#公共方法类型\" class=\"headerlink\" title=\"公共方法类型\"></a>公共方法类型</h3><h4 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h4><p>在#[near_bindgen]宏包裹下的函数可以使用 <code>pub</code>标识符修饰,这样当它编译成<code>WASM</code>字节码以后就可以被外部调用</p>\n<p>只讲能在外部调用的方法标记成<code>public</code>是很重要的.如果你需要合约自身来调用,你可以标记该方法为公共的但是添加<code>#[private]</code>修饰,这样除了合约自身的调用,任何调用都会导致<code>panic</code></p>\n<p>基本的用法如下所示:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">MyContractStructure</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_method</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// .. method logic here</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这将从WASM二进制码中公开some_method,任何人都可以访问它</p>\n<details class=\"custom-details\">\n<summary>展开显示生成的代码</summary>\n<p><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[cfg(target_arch = <span class=\"token string\">\"wasm32\"</span>)]</span>\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">setup_panic_hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">attached_deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method some_method doesn\\'t accept deposit\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> contract<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MyContractStructure</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">state_read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    contract<span class=\"token punctuation\">.</span><span class=\"token function\">some_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">state_write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>contract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<h4 id=\"公开trait实现\"><a href=\"#公开trait实现\" class=\"headerlink\" title=\"公开trait实现\"></a>公开trait实现</h4><p>函数也能够公开自己的trait实现.这有助于在合约中实现共有的接口或标准.下面的代码与<code>pub</code>的基础用法很相似,除了<code>#[near_bindgen]</code>宏只需要附属在trait的实现上,而无需附属与trait本身.</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">MyTrait</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">trait_method</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">MyTrait</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">MyContractStructure</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">trait_method</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// .. method logic here</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个例子中,生成的代码与前一个例子相同,只是方法名不一样</p>\n<details class=\"custom-details\">\n<summary>展开显示生成的代码</summary>\n<p>#[cfg(target_arch &#x3D; “wasm32”)]</p>\n<p>#[no_mangle]</p>\n<p><em>pub</em> <em>extern</em> “C” <em>fn</em> trait_method() {</p>\n<p>​    near_sdk::env::setup_panic_hook();</p>\n<p>​    <em>if</em> near_sdk::env::attached_deposit() !&#x3D; 0 {</p>\n<p>​        near_sdk::env::panic(“Method trait_method doesn&#39;t accept deposit”.as_bytes());</p>\n<p>​    }</p>\n<p>​    <em>let</em> <em>mut</em> contract: MyContractStructure &#x3D; near_sdk::env::state_read().unwrap_or_default();</p>\n<p>​    contract.trait_method();</p>\n<p>​    near_sdk::env::state_write(&amp;contract);</p>\n<p>}</p>\n\n</details>\n<h3 id=\"合约状态可变性\"><a href=\"#合约状态可变性\" class=\"headerlink\" title=\"合约状态可变性\"></a>合约状态可变性</h3><p>合约状态可变性是通过函数参数中的<code>self</code>参数是怎样的来自动处理的.根据使用的是哪一个,<code>#[near_bindgen]</code>宏将生成相应的代码来加载&#x2F;反序列化任何使用<code>self</code>的函数的状态，序列化&#x2F;存储状态只在使用<code>&amp;mut self</code>时使用。</p>\n<h4 id=\"只读函数\"><a href=\"#只读函数\" class=\"headerlink\" title=\"只读函数\"></a>只读函数</h4><p>以不可变的方式调用合约时,交易结束时不会覆写任何状态.你可以通过使用&amp;self 或者 self 作为参数.他们都将生成同样的代码去加载并反序列化状态到结构体中,然后调用函数.不同的是,self 会将变量的所有权移动进函数中,&amp;self 仅仅将 self 的引用移动进函数中.</p>\n<p>下面是一个例子:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, Default)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">MyContractStructure</span> <span class=\"token punctuation\">&#123;</span>\n    integer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">MyContractStructure</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_values</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">log_state_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>没有适用于所有情况的通用准则,但有一些核心规则需要遵守:</p>\n<ul>\n<li><p>self (所有权)</p>\n<!--如果在函数中移动了 self 的值或者其包含的值时使用 ``self`` 作为参数是很有用的,因为这样减少了 ``copy`` 和 ``clone`` 的操作-->\n\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">/// View method. More efficient, but can't be reused internally, because it consumes self.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_owner_id</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">AccountId</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>owner_id\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>&amp;self(不可变引用)</p>\n<p>当值需要只读的合约状态,或者函数使用了一些方法来获得了可用的所有权时使用<code>&amp;self</code>.如果结构体使用了大量内存,这很有用,可以避免将大量的数据转移进函数作用域中.</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">/// View method. Requires cloning the account id.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_owner_id</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">AccountId</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>owner_id<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>返回派生数据</p>\n<p>有些少见的情况需要我们通过只读的方式来返回从存储中获取并修改的数据.如下面所示:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">/// View method that \"modifies\" state, for code structure or computational</span>\n<span class=\"token comment\">/// efficiency reasons. Changes state in-memory, but does NOT save the new</span>\n<span class=\"token comment\">/// state. If called internally by a change method, WILL result in updated</span>\n<span class=\"token comment\">/// contract state.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">update_stats</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> account_id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">:</span> <span class=\"token constant\">U64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>account_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">panic_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERR_ACCT_NOT_FOUND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    account<span class=\"token punctuation\">.</span>total <span class=\"token operator\">+=</span> score<span class=\"token punctuation\">;</span>\n    account\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","text":"公共方法类型基础实现在#[near_bindgen]宏包裹下的函数可以使用 pub标识符修饰,这样当它编译成WASM字节码以后就可以被外部调用 只讲能在外部调用的方法标记成public是很重要的.如果你需要合约自身来调用,你可以标记该方法为公共的但是添加#[private]修饰,...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">公共方法类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">基础实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AC%E5%BC%80trait%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">公开trait实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E7%BA%A6%E7%8A%B6%E6%80%81%E5%8F%AF%E5%8F%98%E6%80%A7\"><span class=\"toc-text\">合约状态可变性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AA%E8%AF%BB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">只读函数</span></a></li></ol></li></ol>","author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}