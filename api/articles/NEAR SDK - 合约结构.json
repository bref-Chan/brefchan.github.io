{"title":"NEAR SDK - 合约结构","uid":"5e99360b3a18af11a239b4863047980f","slug":"NEAR SDK - 合约结构","date":"2022-03-14T06:18:47.231Z","updated":"2022-03-14T10:41:23.906Z","comments":true,"path":"api/articles/NEAR SDK - 合约结构.json","keywords":"区块链, NEAR Protocol, 智能合约, 夜影协议, NEAR","cover":null,"content":"<h3 id=\"near-bindgen\"><a href=\"#near-bindgen\" class=\"headerlink\" title=\"near_bindgen\"></a>near_bindgen</h3><p><code>#[near_bindgen]</code>宏被用于结构体和方法实现中以生成必要的代码使其成为一个可用的NEAR合约并且暴露想要公开的方法并使其能够被外部调用</p>\n<p>例如,下面是一个简单的计数合约,<code>#[near_bindgen]</code>宏被这样使用:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>borsh<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorshDeserialize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorshSerialize</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span></span>near_bindgen<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, Default)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Counter</span> <span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">u64</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>在上面的例子中,<code>Counter</code>结构体相当于智能合约的状态,可以包含任何实现了BorshDeserialize和BorshSerialize的成员,甚至是集合,我们将在后面讨论它.当方法被调用时,合约状态将被加载并反序列化,因此,保证加载的数据尽可能少是很重要的.</p>\n<p><code>#[near_bindgen]</code>同样可以注释<code>Counter</code>的方法实现,这将生成必要的模板文件来暴露这些方法.我们必须牢记核心的交互规则:</p>\n<ul>\n<li>任何<code>pub</code>方法都能在外部被账户&#x2F;合约调用.<ul>\n<li>更多的信息,查看<a href=\"https://www.near-sdk.io/contract-interface/public-methods\">公共方法类型</a></li>\n</ul>\n</li>\n<li><code>self</code>有多种用法来控制合约的可变性<ul>\n<li>使用<code>&amp;self</code>和<code>self</code>的方法将是只读的.并且不会写入和更新存储中的状态</li>\n<li>使用<code>&amp;mut self</code>的方法将允许改变状态,状态将在合约调用结束后写入存储</li>\n</ul>\n</li>\n<li>如果公开的函数的参数不包括<code>self</code>.那么它的调用可以省略状态读写<ul>\n<li>这对于一些静态功能或返回嵌入在合约代码中的数据可能很有用.</li>\n</ul>\n</li>\n<li>如果函数有返回值,它将被序列化并且通过<code>env::value_return</code>作为结果附加</li>\n</ul>\n<h4 id=\"初始化方法\"><a href=\"#初始化方法\" class=\"headerlink\" title=\"初始化方法\"></a>初始化方法</h4><p>默认的,合约的<code>Default::default()</code>实现会用于合约的初始化.也可以有一个自定义的初始化函数,它接受参数并执行自定义逻辑.初始化韩式放在<code>#[init]</code>标注下</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token attribute attr-name\">#[init]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token macro property\">log!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custom counter initialization!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span> value <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所有合约都预先实现了<code>Default</code>,如果你想要禁止使用default实现,<code>PanicOnDefault</code>宏可以做到这一点:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Counter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"可支付方法\"><a href=\"#可支付方法\" class=\"headerlink\" title=\"可支付方法\"></a>可支付方法</h4><p>方法可以标注为<code>#[payable]</code>以允许方法在调用时进行通证的转移.更多的信息,查看<a href=\"https://www.near-sdk.io/contract-interface/payable-methods\">可支付方法</a></p>\n<p>下面的例子使用<code>#[payable]</code>注释宣告了函数是可支付的:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[payable]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">my_method</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法\"></a>私有方法</h4><p>有些方法需要公开以允许合约通过<code>Promise</code>调用自身的方法,但是又不允许其他任何合约&#x2F;账户调用它.为此,使用<code>#[private]</code>注释方法以使得外部合约&#x2F;账户的调用会导致<code>panic</code>.更多的信息,查看<a href=\"https://www.near-sdk.io/contract-interface/payable-methods\">私有方法</a></p>\n<p>该注释通过以下的方式应用</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[private]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">my_method</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>当决定应用程序数据使用的数据结构时,重要的是尽可能减少读取和写入存储的数据量,以及反序列化和序列化的数据量,以尽可能的减少交易成本.理解智能合约中的不同数据结构的侧重点非常重要,因为随着程序的扩展,它将成为瓶颈,并且将状态迁移至新的数据结构会付出代价.</p>\n<p><code>near-sdk</code>中的容易被设计成将数据分割成块,并且只会在需要时才进行读取和写入.这些数据结构负责和存储的低级交互并且被设计成与<code>std::collections</code>具有相同的API.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>near_sdk::collections</code>将迁移至<code>near_sdk::store</code>并更新了API.如果你想要访问这些更新的结构体实现,启用<code>unstable</code>特性在<code>near-sdk</code>中.</p></blockquote>\n<p>在使用<code>std::collections</code>时需要牢记,每次状态被加载时,数据结构中的所有数据都将被读取和反序列化.这将为使用任何非少量的数据带来巨大的开销.所以为了最小化gas使用量,大多数情况下,应该是用SDK中的集合.</p>\n<p>SDK中存在如下数据结构:</p>\n<table>\n<thead>\n<tr>\n<th>SDK集合</th>\n<th><code>std</code>等价物</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>LazyOption&lt;T&gt;</code></td>\n<td><code>Option&lt;T&gt;</code></td>\n<td>存储中可选的值.该类型只会在交互时才从存储中读取.当值存在于存储中时,会以 Some<T>的类型提供,当不存在时返回 None</td>\n</tr>\n<tr>\n<td><code>Vecttor&lt;T&gt;</code></td>\n<td><code>Vec&lt;T&gt;</code></td>\n<td>可增长的数组类型.这些值在内存中分片,可以被迭代,并且索引值是可以动态调整大小的</td>\n</tr>\n<tr>\n<td><code>LookupMap&lt;K,V&gt;</code></td>\n<td><code>HashMap&lt;K,V&gt;</code></td>\n<td>该结构相当于一个合约可用的 map的廋包装体.该结构不包含任何关于 map 中元素的元数据,因此不可迭代</td>\n</tr>\n<tr>\n<td><code>unorderedMap&lt;K,V&gt;</code></td>\n<td><code>HashMap&lt;K,V&gt;</code></td>\n<td>与 LookupMap 类似,除了该结构保存能让内部元素进行迭代的额外数据</td>\n</tr>\n<tr>\n<td><code>TreeMap&lt;K,V&gt;</code></td>\n<td><code>BTreeMap&lt;K,V&gt;</code></td>\n<td>UnorderedMap 的有序等价物.当需要一致的顺序或者访问最小,最大键时,应该使用这个结构.底层实现基于 AVL tree</td>\n</tr>\n<tr>\n<td><code>LookupSet&lt;T&gt;</code></td>\n<td><code>HashSet&lt;T&gt;</code></td>\n<td>类似于 LookupMap 的 Set,但不存储和值.只被用来检查特定值是否存在.该结构不能迭代并且只能用来查找</td>\n</tr>\n<tr>\n<td><code>UnorderedSet&lt;T&gt;</code></td>\n<td><code>HashSet&lt;T&gt;</code></td>\n<td>LookupMap 的可迭代等价物,它存储了一些关于 Set 内部元素的额外信息</td>\n</tr>\n</tbody></table>\n<h4 id=\"内存中的-HashMap-vs-持久化的-UnorderedMap\"><a href=\"#内存中的-HashMap-vs-持久化的-UnorderedMap\" class=\"headerlink\" title=\"内存中的 HashMap vs 持久化的 UnorderedMap\"></a>内存中的 <code>HashMap</code> vs 持久化的 <code>UnorderedMap</code></h4><ul>\n<li><code>HashMap</code> 保持所有数据在内存中,为了访问它,合约需要反序列化整个 Map</li>\n<li><code>UnorderedMap</code> 保持所有数据在存储中,访问任何元素只需要反序列化该元素.</li>\n</ul>\n<p>在什么时候使用 <code>HashMap</code>?</p>\n<ul>\n<li>需要在一次方法调用中迭代集合中的所有元素</li>\n<li>元素数量小或固定.例如小于 10 个</li>\n</ul>\n<p>在什么时候使用 <code>UnorrderedMap</code>?</p>\n<ul>\n<li>需要访问整个集合中有限的子集合,例如每次调用只需要访问 1 个或 2 个元素</li>\n<li>无法将整个集合放入内存,例如数据量过大</li>\n</ul>\n<p>原因是 <code>HashMap``` 在一个存储操作中反序列化(或序列化)整个集合.比通过 </code>N&#96;&#96; 个存储操作访问所有元素更加节约 gas 费</p>\n<p>使用<code>HashMap</code>的示例:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Using Default initialization.</span>\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, Default)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> status_updates<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_status</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">predecessor_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Too many messages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Effectively iterating through all removing them.</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_all_updates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用<code>UnorderedMap</code>的示例:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> status_updates<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnorderedMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token attribute attr-name\">#[init]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Initializing `status_updates` with unique key prefix.</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n            status_updates<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnorderedMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"s\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_status</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">predecessor_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Note, don't need to check size, since `UnorderedMap` doesn't store all data in memory.</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">delete_status</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">predecessor_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_status</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> account_id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>account_id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"使用持久化集合进行分页\"><a href=\"#使用持久化集合进行分页\" class=\"headerlink\" title=\"使用持久化集合进行分页\"></a>使用持久化集合进行分页</h4><p>分页集合例如 <code>UnorderedMap</code>,<code>UnorderedSet</code>,和 <code>Vector</code> 可能包含的元素数量超过了 gas 限制下的读取数量.为了通过<code>view</code>调用来公开显示他们,我们可以实现分页.</p>\n<p><code>Vector</code> 通过使用<code>.get(index)</code>来获取指定下标的元素</p>\n<p>要在 <code>UnorderedSet</code> 使用下标来访问元素.我们可以使用<code> .as_vector()</code>方法,该方法将返回元素的 <code>Vector</code></p>\n<p>关于 <code>UnoderedMap</code> 我们需要将 keys 和 values 转换成 <code>Vector</code>,分别使用<code>.keys_as_vector()</code>和<code>.values_as_vector()</code></p>\n<p>使用<code>UnorderedMap</code>实现分页的示例:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> status_updates<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnorderedMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/// Retrieves multiple elements from the `UnorderedMap`.</span>\n    <span class=\"token comment\">/// - `from_index` is the index to start from.</span>\n    <span class=\"token comment\">/// - `limit` is the maximum number of elements to return.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_updates</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from_index<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> keys <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">keys_as_vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">values_as_vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>from_index<span class=\"token punctuation\">..</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cmp<span class=\"token punctuation\">::</span></span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>from_index <span class=\"token operator\">+</span> limit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>status_updates<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>index<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"LookupMapvsUnorderedMap\"><a href=\"#LookupMapvsUnorderedMap\" class=\"headerlink\" title=\"LookupMapvsUnorderedMap\"></a><code>LookupMap</code>vs<code>UnorderedMap</code></h4><h5 id=\"功能性\"><a href=\"#功能性\" class=\"headerlink\" title=\"功能性\"></a>功能性</h5><ul>\n<li><code>UnorderedMap</code>支持迭代keys和values,并且支持分页.在内部,它拥有三个存储结构<ul>\n<li>一个存储key与index关系的map</li>\n<li>一个keys的数组</li>\n<li>一个values的数组</li>\n</ul>\n</li>\n<li><code>LookupMap</code>只拥有一个存储key和value关系的map.没有存储keys的数组,所以它没有能力进行keys的迭代</li>\n</ul>\n<h5 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h5><p><code>LookupMap</code>比<code>UnorderedMap</code>拥有更好的性能和存储更少的数据</p>\n<ul>\n<li><code>UnorderedMap</code>获取数据时需要2次读取操作,写入或插入数据时需要3次写入操作</li>\n<li><code>LookupMap</code>读取时需要1次读取操作,写入时需要1次写入操作</li>\n</ul>\n<h5 id=\"存储空间\"><a href=\"#存储空间\" class=\"headerlink\" title=\"存储空间\"></a>存储空间</h5><p><code>UnorderedMap</code>比<code>LookupMap</code>需要更多的存储空间</p>\n<ul>\n<li><code>UnorderedMap</code>存储key两次(一次在map中,一次在数组中)和value一次.同时需要更高级别的常量来存储数组的长度和前缀</li>\n<li><code>LookupMap</code>存储key,value各一次</li>\n</ul>\n<h4 id=\"LazyOption\"><a href=\"#LazyOption\" class=\"headerlink\" title=\"LazyOption\"></a><code>LazyOption</code></h4><p>这是一个只存储单个值的持久化集合,目标是阻止合约在不需要使用该值时进行反序列化.一个例子是存在一个大的元数据块,它只在<code>view</code>调用中使用,在大多数合约操作中不需要使用.</p>\n<p>它的作用类似于<code>Option</code>,可以保存值们也可以不保存值,同时还需要一个唯一的前缀,就像其他持久化集合一样.</p>\n<p>与其他集合一样,LazyOption只允许在初始化过程中初始化值.</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> metadata<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LazyOption</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Metadata</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(crate = <span class=\"token string\">\"near_sdk::serde\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Metadata</span> <span class=\"token punctuation\">&#123;</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    image<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Base64Vec</span><span class=\"token punctuation\">,</span>\n    blobs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token attribute attr-name\">#[init]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Metadata</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n            metadata<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LazyOption</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_metadata</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Metadata</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// `.get()` reads and deserializes the value from the storage. </span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"集合嵌套\"><a href=\"#集合嵌套\" class=\"headerlink\" title=\"集合嵌套\"></a>集合嵌套</h4><h5 id=\"使用传统方式构造唯一前缀\"><a href=\"#使用传统方式构造唯一前缀\" class=\"headerlink\" title=\"使用传统方式构造唯一前缀\"></a>使用传统方式构造唯一前缀</h5><p>在构造函数中使用一个硬编码的短字母前缀,该前缀将转换为字节 vector.使用嵌套集合,该前缀必须手动构造</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token attribute attr-name\">#[init]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n            accounts<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnorderedMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            tokens<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LookupMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            metadata<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LazyOption</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"m\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_tokens</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> account_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">UnorderedSet</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>account_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Constructing a unique prefix for a nested UnorderedSet.</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> prefix <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Adding unique prefix.</span>\n            prefix<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">b's'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Adding the hash of the account_id (key of the outer map) to the prefix.</span>\n            <span class=\"token comment\">// This is needed to differentiate across accounts.</span>\n            prefix<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>account_id<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UnorderedSet</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tokens\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"为持久化容器生产前缀\"><a href=\"#为持久化容器生产前缀\" class=\"headerlink\" title=\"为持久化容器生产前缀\"></a>为持久化容器生产前缀</h5><p>每个持久化容器都需要一个唯一的前缀.该前缀被用于生成内部的键以持久化的存储数据.这些内部的键必须是唯一的以避免冲突(包括 <code>STATE</code> 的键冲突)<br>当一个合约变的复杂,可能会有多个不同的集合,他们不是主结构的全部组成部分.而是子结构或嵌套容易,他们都需要唯一的前缀<br>我们可以引入一个 <code>enum</code> 来追踪存储前缀和键.然后它们使用 borsh 序列化来为每个容器构造一个唯一的前缀.<br>它与手工构造一样高效,因为 borsh 序列化,一个<code>enum</code>只需要 1 个 字节</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">BorshStorageKey</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(BorshStorageKey, BorshSerialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">StorageKeys</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Accounts</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">SubAccount</span> <span class=\"token punctuation\">&#123;</span> account_hash<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Tokens</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Metadata</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contract</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token attribute attr-name\">#[init]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">&#123;</span>\n            accounts<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnorderedMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StorageKeys</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Accounts</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            tokens<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LookupMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StorageKeys</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Tokens</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            metadata<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LazyOption</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StorageKeys</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Metadata</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_tokens</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> account_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">AccountId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">UnorderedSet</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>account_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">UnorderedSet</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">StorageKeys</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">SubAccount</span> <span class=\"token punctuation\">&#123;</span> account_hash<span class=\"token punctuation\">:</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>account_id<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tokens\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","text":"near_bindgen#[near_bindgen]宏被用于结构体和方法实现中以生成必要的代码使其成为一个可用的NEAR合约并且暴露想要公开的方法并使其能够被外部调用 例如,下面是一个简单的计数合约,#[near_bindgen]宏被这样使用: use near_sdk::bo...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"文档翻译","slug":"文档翻译","count":7,"path":"api/categories/文档翻译.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":8,"path":"api/tags/NEAR.json"},{"name":"near-sdk-rs","slug":"near-sdk-rs","count":7,"path":"api/tags/near-sdk-rs.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#near-bindgen\"><span class=\"toc-text\">near_bindgen</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">初始化方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%94%AF%E4%BB%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">可支付方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">私有方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88\"><span class=\"toc-text\">集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84-HashMap-vs-%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84-UnorderedMap\"><span class=\"toc-text\">内存中的 HashMap vs 持久化的 UnorderedMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%8C%81%E4%B9%85%E5%8C%96%E9%9B%86%E5%90%88%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">使用持久化集合进行分页</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LookupMapvsUnorderedMap\"><span class=\"toc-text\">LookupMapvsUnorderedMap</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD%E6%80%A7\"><span class=\"toc-text\">功能性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">性能</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">存储空间</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LazyOption\"><span class=\"toc-text\">LazyOption</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">集合嵌套</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E6%9E%84%E9%80%A0%E5%94%AF%E4%B8%80%E5%89%8D%E7%BC%80\"><span class=\"toc-text\">使用传统方式构造唯一前缀</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E6%8C%81%E4%B9%85%E5%8C%96%E5%AE%B9%E5%99%A8%E7%94%9F%E4%BA%A7%E5%89%8D%E7%BC%80\"><span class=\"toc-text\">为持久化容器生产前缀</span></a></li></ol></li></ol></li></ol>","author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"NEAR SDK - 构建合约","uid":"a23d5d06f30f38065a9f935e1d761d88","slug":"NEAR SDK - 构建合约","date":"2022-03-14T11:55:53.530Z","updated":"2022-03-16T09:53:23.195Z","comments":true,"path":"api/articles/NEAR SDK - 构建合约.json","keywords":"区块链, NEAR Protocol, 智能合约, 夜影协议, NEAR","cover":null,"text":"基本说明你可以通过下面的命令来编译出你的合约的发行版本 cargo build --target wasm32-unknown-unknown --release 上面的build命令指定了一个target标志来创建一个WebAssembly.wasm文件 注意你的工程目录现在增...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"文档翻译","slug":"文档翻译","count":7,"path":"api/categories/文档翻译.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":8,"path":"api/tags/NEAR.json"},{"name":"near-sdk-rs","slug":"near-sdk-rs","count":7,"path":"api/tags/near-sdk-rs.json"}],"author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NEAR SDK - 跨合约调用","uid":"7ea6f8c776c9e4fb015c2ac37083b48f","slug":"NEAR SDK - 跨合约调用","date":"2022-03-11T12:11:22.994Z","updated":"2022-03-14T11:25:43.076Z","comments":true,"path":"api/articles/NEAR SDK - 跨合约调用.json","keywords":"区块链, NEAR Protocol, 智能合约, 夜影协议, NEAR","cover":null,"text":"回调函数与工作量证明区块链不同,NEAR 协议是分片的,权益证明的区块链网络,当使用原生Rust(编译成 WASM)与智能合约交互时,跨合约调用是异步的.回调用来获取跨合约调用的结果或者用来获取跨合约调用是成功还是失败. 这里有两种进行跨合约调用的技术:高级调用和低级调用.本文档...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"文档翻译","slug":"文档翻译","count":7,"path":"api/categories/文档翻译.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":8,"path":"api/tags/NEAR.json"},{"name":"near-sdk-rs","slug":"near-sdk-rs","count":7,"path":"api/tags/near-sdk-rs.json"}],"author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}