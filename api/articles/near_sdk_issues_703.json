{"title":"NEAR-SDK 关于LazyOption不能与Vector,UnorderedSet和UnorderedMap搭配使用的问题研究","uid":"130cca4e9ec0257289a726a4fb72faf2","slug":"near_sdk_issues_703","date":"2022-04-01T02:11:26.300Z","updated":"2022-04-01T04:01:50.788Z","comments":true,"path":"api/articles/near_sdk_issues_703.json","keywords":"区块链, NEAR-Protocol, 智能合约, 夜影协议, NEAR","cover":null,"content":"<p>本文是针对杨镇老师<a href=\"https://www.bilibili.com/video/BV1UY4y1p7BW?spm_id_from=333.999.0.0\"><em>NEAR 认证开发者（23）： Octopus Network 的 NEAR 智能合约实践</em></a>分享中提及的关于<code>LazyOption</code>搭配<code>collection::Vector</code>,<code>UnorderedSet</code>和<code>UnorderedMap</code>使用过程中会出现的问题的原因的详细探究.欢迎大家斧正.</p>\n<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>杨老师创建了个<a href=\"https://github.com/riversyang/near-contract-sample1\">repo</a>来专门复现这个问题,我们就按repo中举得例子来看.repo基于NEAR官方推出的<a href=\"https://github.com/near-examples/rust-status-message\"><em>rust-status-message</em></a>示例做了一点修改,主要文件很简单,接下来我们看具体做了哪些修改:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>borsh<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorshDeserialize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorshSerialize</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">LazyOption</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LookupMap</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnorderedSet</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>json_types<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">ValidAccountId</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U64</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">,</span> near_bindgen<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorshStorageKey</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PanicOnDefault</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">setup_alloc!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// 使用enum来管理near_sdk::collection初始化所需的前缀</span>\n<span class=\"token attribute attr-name\">#[derive(BorshSerialize, BorshStorageKey)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">StorageKey</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Records</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">UniqueValues</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">UniqueValuesSet</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// 创建了新的结构体,这个结构体使用了UnorderedSet来存储String,同时持有一个u32成员记录UnorderedSet长度</span>\n<span class=\"token comment\">/// 用来记录添加到留言簿当中的独特的留言以及数量</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">UniqueValues</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> unique_values<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnorderedSet</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> other_business_field<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// 添加了新的LazyOption&lt;UniqueValue&gt;类型的字段</span>\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">StatusMessage</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> records<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LookupMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> unique_values<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LazyOption</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">UniqueValues</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// 实现UniqueValues的初始化函数</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">UniqueValues</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>storage_key_of_value_set<span class=\"token punctuation\">:</span> <span class=\"token class-name\">StorageKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n            unique_values<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UnorderedSet</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>storage_key_of_value_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            other_business_field<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">StatusMessage</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// 添加了unique_values初始化内容</span>\n    <span class=\"token attribute attr-name\">#[init]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n            records<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LookupMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StorageKey</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Records</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            unique_values<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LazyOption</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">StorageKey</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">UniqueValues</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">UniqueValues</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StorageKey</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">UniqueValuesSet</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/// 用户像留言簿中添加留言[这与原本的example实现一致],并且如果添加的内容是独特的,返回true,否则返回false</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_status</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> account_id <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">signer_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>account_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> unique_values <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>unique_values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Without the following call of function `set`,</span>\n        <span class=\"token comment\">// it will cause inconsistency of the `UnorderedSet` inside `UniqueValues`.</span>\n        <span class=\"token comment\">// self.unique_values.set(&amp;unique_values);</span>\n        unique_values<span class=\"token punctuation\">.</span>unique_values<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/// 根据用户id获取留言簿内容[与原本example一致]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_status</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> account_id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ValidAccountId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>account_id<span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/// 获取独特的留言的数量</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">unique_values_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token constant\">U64</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>unique_values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unique_values<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/// 查询指定的留言是否已经在留言簿中存在</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">contains_message</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>unique_values\n            <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>unique_values\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[cfg(not(target_arch = <span class=\"token string\">\"wasm32\"</span>))]</span>\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>问题出在哪呢?杨老师在<code>README.md</code>中对问题进行了描述:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当调用<code>set_status({\"message\":\"hello\"})</code>成功的将消息存储到存储中后,使用<code>pub fn unique_values_count(&amp;self)pub fn unique_values_count(&amp;self)</code>查询<code>unique_values_count</code>返回的值却是0,但是,使用<code>pub fn contains_message(&amp;self, message: String) -&gt; bool</code>查询”hello”是否存在于<code>self.unique_values.unique_values</code>中时,却返回true.</p>\n<p>当你修改一个集合的状态,例如<code>Vector</code>,<code>UnorderedSet</code>和<code>UnorderedMap</code>时,当<code>UnderedSet</code>和<code>UnorderedMap</code>中 <code>Vector</code>的<code>len</code>改变是,你必须确保<code>UnderedSet</code>和<code>UnorderedMap</code>的状态被存储,否则将当值集合中的状态不一致.</p></blockquote>\n<p>同时,杨老师也给出了解决问题的办法,就是在修改了<code>unique_values</code>的状态后,手动调用<code>self.unique_values.set(&amp;unique_values)</code></p>\n<h4 id=\"问题研究\"><a href=\"#问题研究\" class=\"headerlink\" title=\"问题研究\"></a>问题研究</h4><h5 id=\"没有调用set-是-但不完全是\"><a href=\"#没有调用set-是-但不完全是\" class=\"headerlink\" title=\"没有调用set? 是,但不完全是.\"></a>没有调用<code>set</code>? 是,但不完全是.</h5><p>要理解这个问题出来的原因,我们要先探讨一下<code>LazyOption</code>的实现,它的结构非常简单:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">/// 持久化的延迟Option,值被存储在存储器中</span>\n<span class=\"token attribute attr-name\">#[derive(BorshSerialize, BorshDeserialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">LazyOption</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">/// 存储的key</span>\n    storage_key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[borsh_skip]</span>\n    <span class=\"token comment\">/// 告诉编译器你申明了泛型但暂时不使用它,同时borsh序列化时跳过这个值</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PhantomData</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面是部分实现:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">LazyOption</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">...</span>\n   <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_raw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">storage_read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>storage_key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">...</span>\n  \n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_raw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> raw_value<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">storage_write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>storage_key<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>raw_value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">LazyOption</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BorshSerialize</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">BorshDeserialize</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">serialize_value</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">match</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">try_to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">,</span>\n              <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ERR_VALUE_SERIALIZATION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">deserialize_value</span><span class=\"token punctuation\">(</span>raw_value<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">::</span><span class=\"token function\">try_from_slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>raw_value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ERR_VALUE_DESERIALIZATION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token comment\">/// 从存储中获取值并返回一个Option</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_raw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>v<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token function\">deserialize_value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// 设置值到存储中,并返回前一个值是否存在</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_raw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token function\">serialize_value</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从代码实现很容易看出,LazyOption在合约调用执行初期,反序列化合约状态时只会反序列化出一个key,而具体的值只会在使用的时候才从存储中拿出,很适合用来包装大的且使用频率小的数据,以达到节省gas费的作用.</p>\n<p>那很多朋友看到这里就会说,结构体提供了<code>pub fn set(&amp;mut self, value: &amp;T) -&gt; bool</code>方法就肯定是要用户手动写入的啊,前面之所以出现了问题那是对sdk的使用不当.</p>\n<p>没错,但是我们不要忽略了这个问题真正的核心: </p>\n<p><strong>不是数据为什么没有写入,而是在不调用set的情况下,部分数据写入但是部分数据没写入造成的不一致现象</strong></p>\n<p>在near合约开发中,函数编写不当很容易处理,只需要更新wasm字节码即可.但是一旦合约数据状态被搞乱,是很难进行还原的,特别是正式合约中开发者已经放弃了合约的<code>full_access_key</code>的情况</p>\n<h5 id=\"数据存储行为不一致-是的\"><a href=\"#数据存储行为不一致-是的\" class=\"headerlink\" title=\"数据存储行为不一致? 是的.\"></a>数据存储行为不一致? 是的.</h5><p>为什么会出现<code>LazyOption</code>在不调用<code>set</code>方法但是当中的数据有些没存储有些却存储了呢?我们先从合约的状态来说起.</p>\n<p>我们都知道,当我们调用一个合约时,实际上是发起了一个<code>transaction</code>,我们忽略NEAR中关于<code>receipt</code>和<code>chunk</code>的概念来简单理解.当块生产者执行<code>transaction</code>时,会从合约账户的存储中反序列化出合约的state.这也就是我们常说的<code>state_read</code>,在合约执行结束后序列化合约状态进存储中,这就是我们说的<code>state_write</code>.</p>\n<p>让我们通过一个例子,更清楚了看待这个过程:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">MyContractStructure</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_method</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// .. method logic here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当我们调用<code>some_method</code>时,实际上我们做的事情比看的更多,<code>near_bindgen</code>会展开我们的函数,当调用时,我们实际上调用的函数长的是这样的:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[cfg(target_arch = <span class=\"token string\">\"wasm32\"</span>)]</span>\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">setup_panic_hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">attached_deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method some_method doesn\\'t accept deposit\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> contract<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MyContractStructure</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">state_read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    contract<span class=\"token punctuation\">.</span><span class=\"token function\">some_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">near_sdk<span class=\"token punctuation\">::</span>env<span class=\"token punctuation\">::</span></span><span class=\"token function\">state_write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>contract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看到,在执行<code>contract.some_method()</code>之前,我们执行了<code>near_sdk::env::state_read()</code>,在执行之后.我们执行了<code>near_sdk::env::state_write(&amp;contract)</code></p>\n<p>再根据之前我们研究<code>LazyOption</code>时发现的特性,LazyOption反序列化的时候只需反序列化其中的key,那么当然在序列化的时候,也只会序列化它的key,所对应的数据自然不会写入到合约状态之中.所以我们能在最上面的示例中看到<code>other_business_field</code>并没有存储在合约状态之中.</p>\n<p>那么问题还在,为什么<code>UnorderedSet</code>类型的<code>unique_values</code>字段里的数据却保存下来了呢?</p>\n<p>其实很简单,我们先看一下合约状态是怎么序列化和反序列化的:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">state_read</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">borsh<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">BorshDeserialize</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">storage_read</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATE_KEY</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>data<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">::</span><span class=\"token function\">try_from_slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot deserialize the contract state.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">state_write</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">borsh<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">BorshSerialize</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">try_to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot serialize the contract state.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">storage_write</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATE_KEY</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看到.他们使用了函数<code>storage_read</code>和<code>storage_write</code>,我们再看这两个函数的实现:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">storage_write</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">BLOCKCHAIN_INTERFACE</span><span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>b<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            b<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BLOCKCHAIN_INTERFACE_NOT_SET_ERR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">storage_write</span><span class=\"token punctuation\">(</span>\n                key<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> _<span class=\"token punctuation\">,</span>\n                key<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> _<span class=\"token punctuation\">,</span>\n                value<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> _<span class=\"token punctuation\">,</span>\n                value<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> _<span class=\"token punctuation\">,</span>\n                <span class=\"token constant\">EVICTED_REGISTER</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">0</span> <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">1</span> <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">unreachable!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/// Reads the value stored under the given key.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">storage_read</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">BLOCKCHAIN_INTERFACE</span><span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>b<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            b<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BLOCKCHAIN_INTERFACE_NOT_SET_ERR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">storage_read</span><span class=\"token punctuation\">(</span>\n                key<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> _<span class=\"token punctuation\">,</span>\n                key<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> _<span class=\"token punctuation\">,</span>\n                <span class=\"token constant\">ATOMIC_OP_REGISTER</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">0</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">1</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token function\">read_register</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATOMIC_OP_REGISTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REGISTER_EXPECTED_ERR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">unreachable!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>BLOCKCHAIN_INTERFACE</code>是区块链层提供给运行时层的接口,我们可以看到,wasm虚拟机修改账户存储时是通过BLOCKCHAIN_INTERFACE来实现的.</p>\n<p>我们可以猜想:<code>UnorderedSet</code>类型的变量<code>unique_values</code>之所以不经过<code>state_write</code>的过程却依旧可以写入合约状态,那大概率是调用的了<code>storage_write()</code></p>\n<p>我们从源码中找一下:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">/// 下面是UnorderedSet的实现</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">UnorderedSet</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BorshSerialize</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">BorshDeserialize</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert_raw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token function\">serialize_element</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>UnorderedSet</code>实例调用<code>insert</code>时调用的<code>insert_raw</code>函数,我们来看这个函数:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">UnorderedSet</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">...</span>\n   <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">insert_raw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> element_raw<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> index_lookup <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">raw_element_to_index_lookup</span><span class=\"token punctuation\">(</span>element_raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">match</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">storage_read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>index_lookup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>_index_raw<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// The element does not exist yet.</span>\n                <span class=\"token keyword\">let</span> next_index <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> next_index_raw <span class=\"token operator\">=</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token function\">serialize_index</span><span class=\"token punctuation\">(</span>next_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">storage_write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>index_lookup<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>next_index_raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">.</span><span class=\"token function\">push_raw</span><span class=\"token punctuation\">(</span>element_raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>bingo!!!破案了,确实是调用了<code>env::storage_write</code>.</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这篇文章到这里就结束了,我们研究了当LazyOption和<code>UnorderedSet</code>搭配使用时,在修改了状态但未调用<code>LazyOption</code>的<code>set</code>方法时,存储行为不一致的现象.了解了<code>LazyOption</code>和<code>UnorderedSet</code>的实现机制,以及合约状态是如何序列化和反序列化的.</p>\n","feature":true,"text":"本文是针对杨镇老师NEAR 认证开发者（23）： Octopus Network 的 NEAR 智能合约实践分享中提及的关于LazyOption搭配collection::Vector,UnorderedSet和UnorderedMap使用过程中会出现的问题的原因的详细探究.欢迎...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"NEAR 合约开发","slug":"NEAR-合约开发","count":1,"path":"api/categories/NEAR-合约开发.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":9,"path":"api/tags/NEAR.json"},{"name":"NEAR SDK","slug":"NEAR-SDK","count":1,"path":"api/tags/NEAR-SDK.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6\"><span class=\"toc-text\">问题研究</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B2%A1%E6%9C%89%E8%B0%83%E7%94%A8set-%E6%98%AF-%E4%BD%86%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%98%AF\"><span class=\"toc-text\">没有调用set? 是,但不完全是.</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%A1%8C%E4%B8%BA%E4%B8%8D%E4%B8%80%E8%87%B4-%E6%98%AF%E7%9A%84\"><span class=\"toc-text\">数据存储行为不一致? 是的.</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"NEAR 协议规范 - 链规范","uid":"afa5c84143f6c6cd1bcd166aafa8f4ba","slug":"NEAR consensus","date":"2022-03-21T05:39:34.237Z","updated":"2022-03-21T09:42:24.469Z","comments":true,"path":"api/articles/NEAR consensus.json","keywords":"区块链, NEAR-Protocol, 智能合约, 夜影协议, NEAR","cover":null,"text":"共识定义和符号为了维护共识,交易被分组成一个个区块(block).有一个预先配置的区块被成为创世区块(genesis block).除了以外的每个区块都有一个连接点指向前一个区块 , 为当前区块.并且任何区块沿着连接最终都会到达(也就是说,不会成环). 区块之间的连接产生了顺序:...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"NEAR协议规范","slug":"NEAR协议规范","count":1,"path":"api/categories/NEAR协议规范.json"}],"tags":[{"name":"NEAR","slug":"NEAR","count":9,"path":"api/tags/NEAR.json"},{"name":"NEAR Protocol","slug":"NEAR-Protocol","count":1,"path":"api/tags/NEAR-Protocol.json"}],"author":{"name":"Bref","slug":"blog-author","avatar":"https://avatarfiles.alphacoders.com/700/70031.gif","link":"/","description":"Nothing is true,Everything is permitted.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}